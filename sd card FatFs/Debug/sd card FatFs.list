
sd card FatFs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000588  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1b4  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cbd  00000000  00000000  0002a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000880  00000000  00000000  0002c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213ed  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccf1  00000000  00000000  0004e4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c292b  00000000  00000000  0005b19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011dac9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000253c  00000000  00000000  0011db1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005194 	.word	0x08005194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08005194 	.word	0x08005194

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <SELECT+0x1c>)
 80004d8:	f001 fa12 	bl	8001900 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 ff69 	bl	80013b4 <HAL_Delay>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020400 	.word	0x40020400

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <DESELECT+0x1c>)
 80004f8:	f001 fa02 	bl	8001900 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 ff59 	bl	80013b4 <HAL_Delay>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000516:	bf00      	nop
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <SPI_TxByte+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b02      	cmp	r3, #2
 8000524:	d1f8      	bne.n	8000518 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <SPI_TxByte+0x30>)
 800052e:	f001 feee 	bl	800230e <HAL_SPI_Transmit>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000048 	.word	0x20000048

08000540 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SPI_TxBuffer+0x30>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b02      	cmp	r3, #2
 800055a:	d1f8      	bne.n	800054e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <SPI_TxBuffer+0x30>)
 8000564:	f001 fed3 	bl	800230e <HAL_SPI_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000048 	.word	0x20000048

08000574 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800057a:	23ff      	movs	r3, #255	; 0xff
 800057c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057e:	bf00      	nop
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <SPI_RxByte+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1f8      	bne.n	8000580 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058e:	1dba      	adds	r2, r7, #6
 8000590:	1df9      	adds	r1, r7, #7
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <SPI_RxByte+0x34>)
 800059a:	f001 fff4 	bl	8002586 <HAL_SPI_TransmitReceive>

	return data;
 800059e:	79bb      	ldrb	r3, [r7, #6]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000048 	.word	0x20000048

080005ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005b4:	f7ff ffde 	bl	8000574 <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SD_ReadyWait+0x30>)
 80005d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005d6:	f7ff ffcd 	bl	8000574 <SPI_RxByte>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	d003      	beq.n	80005ec <SD_ReadyWait+0x24>
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SD_ReadyWait+0x30>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f4      	bne.n	80005d6 <SD_ReadyWait+0xe>

	return res;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000042 	.word	0x20000042

080005fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000602:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000606:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000608:	f7ff ff70 	bl	80004ec <DESELECT>
	for(int i = 0; i < 10; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	e005      	b.n	800061e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000612:	20ff      	movs	r0, #255	; 0xff
 8000614:	f7ff ff7a 	bl	800050c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	ddf6      	ble.n	8000612 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000624:	f7ff ff52 	bl	80004cc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800063c:	2395      	movs	r3, #149	; 0x95
 800063e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000640:	463b      	mov	r3, r7
 8000642:	2106      	movs	r1, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7b 	bl	8000540 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800064a:	e002      	b.n	8000652 <SD_PowerOn+0x56>
	{
		cnt--;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	f7ff ff8f 	bl	8000574 <SPI_RxByte>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d002      	beq.n	8000662 <SD_PowerOn+0x66>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f4      	bne.n	800064c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000662:	f7ff ff43 	bl	80004ec <DESELECT>
	SPI_TxByte(0XFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f7ff ff50 	bl	800050c <SPI_TxByte>

	PowerFlag = 1;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <SD_PowerOn+0x80>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000045 	.word	0x20000045

08000680 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_PowerOff+0x14>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000045 	.word	0x20000045

08000698 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SD_CheckPower+0x14>)
 800069e:	781b      	ldrb	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000045 	.word	0x20000045

080006b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SD_RxDataBlock+0x58>)
 80006bc:	22c8      	movs	r2, #200	; 0xc8
 80006be:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c0:	f7ff ff58 	bl	8000574 <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d103      	bne.n	80006d6 <SD_RxDataBlock+0x26>
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <SD_RxDataBlock+0x58>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2bfe      	cmp	r3, #254	; 0xfe
 80006da:	d001      	beq.n	80006e0 <SD_RxDataBlock+0x30>
 80006dc:	2300      	movs	r3, #0
 80006de:	e00f      	b.n	8000700 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff60 	bl	80005ac <SPI_RxBytePtr>
	} while(len--);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	603a      	str	r2, [r7, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80006f6:	f7ff ff3d 	bl	8000574 <SPI_RxByte>
	SPI_RxByte();
 80006fa:	f7ff ff3b 	bl	8000574 <SPI_RxByte>

	return TRUE;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000040 	.word	0x20000040

0800070c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800071c:	f7ff ff54 	bl	80005c8 <SD_ReadyWait>
 8000720:	4603      	mov	r3, r0
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d001      	beq.n	800072a <SD_TxDataBlock+0x1e>
 8000726:	2300      	movs	r3, #0
 8000728:	e02f      	b.n	800078a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feed 	bl	800050c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2bfd      	cmp	r3, #253	; 0xfd
 8000736:	d020      	beq.n	800077a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff feff 	bl	8000540 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000742:	f7ff ff17 	bl	8000574 <SPI_RxByte>
		SPI_RxByte();
 8000746:	f7ff ff15 	bl	8000574 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800074a:	e00b      	b.n	8000764 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800074c:	f7ff ff12 	bl	8000574 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b05      	cmp	r3, #5
 800075c:	d006      	beq.n	800076c <SD_TxDataBlock+0x60>
			i++;
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b40      	cmp	r3, #64	; 0x40
 8000768:	d9f0      	bls.n	800074c <SD_TxDataBlock+0x40>
 800076a:	e000      	b.n	800076e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800076c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800076e:	bf00      	nop
 8000770:	f7ff ff00 	bl	8000574 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0fa      	beq.n	8000770 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	2b05      	cmp	r3, #5
 8000782:	d101      	bne.n	8000788 <SD_TxDataBlock+0x7c>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <SD_TxDataBlock+0x7e>

	return FALSE;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	6039      	str	r1, [r7, #0]
 800079c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079e:	f7ff ff13 	bl	80005c8 <SD_ReadyWait>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2bff      	cmp	r3, #255	; 0xff
 80007a6:	d001      	beq.n	80007ac <SD_SendCmd+0x1a>
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	e042      	b.n	8000832 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feac 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fea6 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fea0 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9a 	bl	800050c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe95 	bl	800050c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x5c>
 80007e8:	2395      	movs	r3, #149	; 0x95
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e007      	b.n	80007fe <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b48      	cmp	r3, #72	; 0x48
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x68>
 80007f4:	2387      	movs	r3, #135	; 0x87
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <SD_SendCmd+0x6c>
	else crc = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe83 	bl	800050c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b4c      	cmp	r3, #76	; 0x4c
 800080a:	d101      	bne.n	8000810 <SD_SendCmd+0x7e>
 800080c:	f7ff feb2 	bl	8000574 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000814:	f7ff feae 	bl	8000574 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800081c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da05      	bge.n	8000830 <SD_SendCmd+0x9e>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	3b01      	subs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f1      	bne.n	8000814 <SD_SendCmd+0x82>

	return res;
 8000830:	7b7b      	ldrb	r3, [r7, #13]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SD_disk_initialize+0x14>
 800084c:	2301      	movs	r3, #1
 800084e:	e0d1      	b.n	80009f4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000850:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <SD_disk_initialize+0x2a>
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0c6      	b.n	80009f4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000866:	f7ff fec9 	bl	80005fc <SD_PowerOn>

	/* slave select */
	SELECT();
 800086a:	f7ff fe2f 	bl	80004cc <SELECT>

	/* check disk type */
	type = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8c 	bl	8000792 <SD_SendCmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a1 	bne.w	80009c4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <SD_disk_initialize+0x1c4>)
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088e:	2048      	movs	r0, #72	; 0x48
 8000890:	f7ff ff7f 	bl	8000792 <SD_SendCmd>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d155      	bne.n	8000946 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e00c      	b.n	80008ba <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	f7ff fe67 	bl	8000574 <SPI_RxByte>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	f104 0310 	add.w	r3, r4, #16
 80008ae:	443b      	add	r3, r7
 80008b0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d9ef      	bls.n	80008a0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d17e      	bne.n	80009c4 <SD_disk_initialize+0x188>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17b      	bne.n	80009c4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff5f 	bl	8000792 <SD_SendCmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <SD_disk_initialize+0xae>
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff57 	bl	8000792 <SD_SendCmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ec      	bne.n	80008cc <SD_disk_initialize+0x90>
 80008f2:	e000      	b.n	80008f6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d062      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80008fe:	2100      	movs	r1, #0
 8000900:	207a      	movs	r0, #122	; 0x7a
 8000902:	f7ff ff46 	bl	8000792 <SD_SendCmd>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d15b      	bne.n	80009c4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00c      	b.n	800092c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000912:	7bfc      	ldrb	r4, [r7, #15]
 8000914:	f7ff fe2e 	bl	8000574 <SPI_RxByte>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	f104 0310 	add.w	r3, r4, #16
 8000920:	443b      	add	r3, r7
 8000922:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	3301      	adds	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d9ef      	bls.n	8000912 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SD_disk_initialize+0x104>
 800093c:	230c      	movs	r3, #12
 800093e:	e000      	b.n	8000942 <SD_disk_initialize+0x106>
 8000940:	2304      	movs	r3, #4
 8000942:	73bb      	strb	r3, [r7, #14]
 8000944:	e03e      	b.n	80009c4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000946:	2100      	movs	r1, #0
 8000948:	2077      	movs	r0, #119	; 0x77
 800094a:	f7ff ff22 	bl	8000792 <SD_SendCmd>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d808      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000954:	2100      	movs	r1, #0
 8000956:	2069      	movs	r0, #105	; 0x69
 8000958:	f7ff ff1b 	bl	8000792 <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d801      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000962:	2302      	movs	r3, #2
 8000964:	e000      	b.n	8000968 <SD_disk_initialize+0x12c>
 8000966:	2301      	movs	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d10e      	bne.n	800098e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff0d 	bl	8000792 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d80e      	bhi.n	800099c <SD_disk_initialize+0x160>
 800097e:	2100      	movs	r1, #0
 8000980:	2069      	movs	r0, #105	; 0x69
 8000982:	f7ff ff06 	bl	8000792 <SD_SendCmd>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d107      	bne.n	800099c <SD_disk_initialize+0x160>
 800098c:	e00c      	b.n	80009a8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098e:	2100      	movs	r1, #0
 8000990:	2041      	movs	r0, #65	; 0x41
 8000992:	f7ff fefe 	bl	8000792 <SD_SendCmd>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <SD_disk_initialize+0x1c4>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1e2      	bne.n	800096a <SD_disk_initialize+0x12e>
 80009a4:	e000      	b.n	80009a8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <SD_disk_initialize+0x184>
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	2050      	movs	r0, #80	; 0x50
 80009b6:	f7ff feec 	bl	8000792 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80009c0:	2300      	movs	r3, #0
 80009c2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c4:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <SD_disk_initialize+0x1c8>)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009ca:	f7ff fd8f 	bl	80004ec <DESELECT>
	SPI_RxByte();
 80009ce:	f7ff fdd1 	bl	8000574 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e001      	b.n	80009ee <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009ea:	f7ff fe49 	bl	8000680 <SD_PowerOff>
	}

	return Stat;
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000040 	.word	0x20000040
 8000a04:	20000044 	.word	0x20000044

08000a08 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_status+0x14>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e002      	b.n	8000a22 <SD_disk_status+0x1a>
	return Stat;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SD_disk_status+0x28>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <SD_disk_read+0x1c>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <SD_disk_read+0x20>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e051      	b.n	8000af8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SD_disk_read+0xcc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SD_disk_read+0x32>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e048      	b.n	8000af8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SD_disk_read+0xd0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x44>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a78:	f7ff fd28 	bl	80004cc <SELECT>

	if (count == 1)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d111      	bne.n	8000aa6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2051      	movs	r0, #81	; 0x51
 8000a86:	f7ff fe84 	bl	8000792 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d129      	bne.n	8000ae4 <SD_disk_read+0xb0>
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f7ff fe0b 	bl	80006b0 <SD_RxDataBlock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <SD_disk_read+0xb0>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	e01e      	b.n	8000ae4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2052      	movs	r0, #82	; 0x52
 8000aaa:	f7ff fe72 	bl	8000792 <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d117      	bne.n	8000ae4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	68b8      	ldr	r0, [r7, #8]
 8000aba:	f7ff fdf9 	bl	80006b0 <SD_RxDataBlock>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00a      	beq.n	8000ada <SD_disk_read+0xa6>
				buff += 512;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000aca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1ed      	bne.n	8000ab4 <SD_disk_read+0x80>
 8000ad8:	e000      	b.n	8000adc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ada:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	204c      	movs	r0, #76	; 0x4c
 8000ae0:	f7ff fe57 	bl	8000792 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae4:	f7ff fd02 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000ae8:	f7ff fd44 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000044 	.word	0x20000044

08000b08 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_write+0x1c>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <SD_disk_write+0x20>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e06b      	b.n	8000c00 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <SD_disk_write+0x100>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SD_disk_write+0x32>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e062      	b.n	8000c00 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <SD_disk_write+0x100>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SD_disk_write+0x44>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e059      	b.n	8000c00 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <SD_disk_write+0x104>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <SD_disk_write+0x56>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	025b      	lsls	r3, r3, #9
 8000b5c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b5e:	f7ff fcb5 	bl	80004cc <SELECT>

	if (count == 1)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d110      	bne.n	8000b8a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2058      	movs	r0, #88	; 0x58
 8000b6c:	f7ff fe11 	bl	8000792 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d13a      	bne.n	8000bec <SD_disk_write+0xe4>
 8000b76:	21fe      	movs	r1, #254	; 0xfe
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fdc7 	bl	800070c <SD_TxDataBlock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d033      	beq.n	8000bec <SD_disk_write+0xe4>
			count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	e030      	b.n	8000bec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <SD_disk_write+0x104>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2077      	movs	r0, #119	; 0x77
 8000b9a:	f7ff fdfa 	bl	8000792 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	2057      	movs	r0, #87	; 0x57
 8000ba2:	f7ff fdf6 	bl	8000792 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2059      	movs	r0, #89	; 0x59
 8000baa:	f7ff fdf2 	bl	8000792 <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb4:	21fc      	movs	r1, #252	; 0xfc
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f7ff fda8 	bl	800070c <SD_TxDataBlock>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <SD_disk_write+0xd0>
				buff += 512;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ee      	bne.n	8000bb4 <SD_disk_write+0xac>
 8000bd6:	e000      	b.n	8000bda <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bda:	21fd      	movs	r1, #253	; 0xfd
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd95 	bl	800070c <SD_TxDataBlock>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <SD_disk_write+0xe4>
			{
				count = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bec:	f7ff fc7e 	bl	80004ec <DESELECT>
	SPI_RxByte();
 8000bf0:	f7ff fcc0 	bl	8000574 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000044 	.word	0x20000044

08000c10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	603a      	str	r2, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x1e>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e115      	b.n	8000e5a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d124      	bne.n	8000c84 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d012      	beq.n	8000c68 <SD_disk_ioctl+0x58>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	dc1a      	bgt.n	8000c7c <SD_disk_ioctl+0x6c>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <SD_disk_ioctl+0x40>
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d006      	beq.n	8000c5c <SD_disk_ioctl+0x4c>
 8000c4e:	e015      	b.n	8000c7c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c50:	f7ff fd16 	bl	8000680 <SD_PowerOff>
			res = RES_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c5a:	e0fc      	b.n	8000e56 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c5c:	f7ff fcce 	bl	80005fc <SD_PowerOn>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c66:	e0f6      	b.n	8000e56 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	1c5c      	adds	r4, r3, #1
 8000c6c:	f7ff fd14 	bl	8000698 <SD_CheckPower>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c7a:	e0ec      	b.n	8000e56 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c82:	e0e8      	b.n	8000e56 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <SD_disk_ioctl+0x254>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SD_disk_ioctl+0x86>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e0e1      	b.n	8000e5a <SD_disk_ioctl+0x24a>

		SELECT();
 8000c96:	f7ff fc19 	bl	80004cc <SELECT>

		switch (ctrl)
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	f200 80cb 	bhi.w	8000e38 <SD_disk_ioctl+0x228>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <SD_disk_ioctl+0x98>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000da3 	.word	0x08000da3
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000d93 	.word	0x08000d93
 8000cb4:	08000e39 	.word	0x08000e39
 8000cb8:	08000e39 	.word	0x08000e39
 8000cbc:	08000e39 	.word	0x08000e39
 8000cc0:	08000e39 	.word	0x08000e39
 8000cc4:	08000e39 	.word	0x08000e39
 8000cc8:	08000e39 	.word	0x08000e39
 8000ccc:	08000e39 	.word	0x08000e39
 8000cd0:	08000e39 	.word	0x08000e39
 8000cd4:	08000db5 	.word	0x08000db5
 8000cd8:	08000dd9 	.word	0x08000dd9
 8000cdc:	08000dfd 	.word	0x08000dfd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2049      	movs	r0, #73	; 0x49
 8000ce4:	f7ff fd55 	bl	8000792 <SD_SendCmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a8 	bne.w	8000e40 <SD_disk_ioctl+0x230>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcda 	bl	80006b0 <SD_RxDataBlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809e 	beq.w	8000e40 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10e      	bne.n	8000d2c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0e:	7d7b      	ldrb	r3, [r7, #21]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d22:	8bfb      	ldrh	r3, [r7, #30]
 8000d24:	029a      	lsls	r2, r3, #10
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02e      	b.n	8000d8a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0306 	and.w	r3, r3, #6
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	099b      	lsrs	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d7c:	8bfa      	ldrh	r2, [r7, #30]
 8000d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d82:	3b09      	subs	r3, #9
 8000d84:	409a      	lsls	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d90:	e056      	b.n	8000e40 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000da0:	e055      	b.n	8000e4e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000da2:	f7ff fc11 	bl	80005c8 <SD_ReadyWait>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d14b      	bne.n	8000e44 <SD_disk_ioctl+0x234>
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db2:	e047      	b.n	8000e44 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db4:	2100      	movs	r1, #0
 8000db6:	2049      	movs	r0, #73	; 0x49
 8000db8:	f7ff fceb 	bl	8000792 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d142      	bne.n	8000e48 <SD_disk_ioctl+0x238>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f7ff fc73 	bl	80006b0 <SD_RxDataBlock>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d03b      	beq.n	8000e48 <SD_disk_ioctl+0x238>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dd6:	e037      	b.n	8000e48 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd8:	2100      	movs	r1, #0
 8000dda:	204a      	movs	r0, #74	; 0x4a
 8000ddc:	f7ff fcd9 	bl	8000792 <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d132      	bne.n	8000e4c <SD_disk_ioctl+0x23c>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6a38      	ldr	r0, [r7, #32]
 8000dea:	f7ff fc61 	bl	80006b0 <SD_RxDataBlock>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <SD_disk_ioctl+0x23c>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dfa:	e027      	b.n	8000e4c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	207a      	movs	r0, #122	; 0x7a
 8000e00:	f7ff fcc7 	bl	8000792 <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e10:	e00b      	b.n	8000e2a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e12:	6a3c      	ldr	r4, [r7, #32]
 8000e14:	1c63      	adds	r3, r4, #1
 8000e16:	623b      	str	r3, [r7, #32]
 8000e18:	f7ff fbac 	bl	8000574 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3e:	e006      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <SD_disk_ioctl+0x23e>
			break;
 8000e4c:	bf00      	nop
		}

		DESELECT();
 8000e4e:	f7ff fb4d 	bl	80004ec <DESELECT>
		SPI_RxByte();
 8000e52:	f7ff fb8f 	bl	8000574 <SPI_RxByte>
	}

	return res;
 8000e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fa30 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f86e 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f90c 	bl	8001090 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e78:	f000 f8d4 	bl	8001024 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000e7c:	f001 fdf0 	bl	8002a60 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  result = f_mount(&fatfs, "", 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	492a      	ldr	r1, [pc, #168]	; (8000f2c <main+0xc4>)
 8000e84:	482a      	ldr	r0, [pc, #168]	; (8000f30 <main+0xc8>)
 8000e86:	f003 fb9d 	bl	80045c4 <f_mount>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <main+0xcc>)
 8000e90:	701a      	strb	r2, [r3, #0]
  if(result != FR_OK)
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <main+0xcc>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d000      	beq.n	8000e9c <main+0x34>
  {
	  while(1);
 8000e9a:	e7fe      	b.n	8000e9a <main+0x32>
  }


//					OKUMA ISLEMI (READING)

  result = f_open(&file_pointer, "test.txt", FA_READ);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4926      	ldr	r1, [pc, #152]	; (8000f38 <main+0xd0>)
 8000ea0:	4826      	ldr	r0, [pc, #152]	; (8000f3c <main+0xd4>)
 8000ea2:	f003 fbd5 	bl	8004650 <f_open>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <main+0xcc>)
 8000eac:	701a      	strb	r2, [r3, #0]
  if(result == FR_OK)
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <main+0xcc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d112      	bne.n	8000edc <main+0x74>
  {
	 result = f_read(&file_pointer, buffer, sizeof(buffer), reading_char);
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <main+0xd8>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2264      	movs	r2, #100	; 0x64
 8000ebc:	4921      	ldr	r1, [pc, #132]	; (8000f44 <main+0xdc>)
 8000ebe:	481f      	ldr	r0, [pc, #124]	; (8000f3c <main+0xd4>)
 8000ec0:	f003 fd84 	bl	80049cc <f_read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <main+0xcc>)
 8000eca:	701a      	strb	r2, [r3, #0]

	 if(result == FR_OK) __NOP();
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <main+0xcc>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <main+0x70>
 8000ed4:	bf00      	nop
 8000ed6:	e002      	b.n	8000ede <main+0x76>
	 else __NOP();
 8000ed8:	bf00      	nop
 8000eda:	e000      	b.n	8000ede <main+0x76>
  }
  else
  {
	  __NOP();
 8000edc:	bf00      	nop
  }
  f_close(&file_pointer);
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <main+0xd4>)
 8000ee0:	f004 f8a6 	bl	8005030 <f_close>



// 					YAZMA ISLEMI (WRITING)

  result = f_open(&file_pointer, "test2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8000ee4:	220a      	movs	r2, #10
 8000ee6:	4918      	ldr	r1, [pc, #96]	; (8000f48 <main+0xe0>)
 8000ee8:	4814      	ldr	r0, [pc, #80]	; (8000f3c <main+0xd4>)
 8000eea:	f003 fbb1 	bl	8004650 <f_open>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <main+0xcc>)
 8000ef4:	701a      	strb	r2, [r3, #0]
  if(result == FR_OK)
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <main+0xcc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <main+0xba>
  {
	 result = f_write(&file_pointer, "HELLO I AM DOGUKAN", 20, reading_char);
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <main+0xd8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2214      	movs	r2, #20
 8000f04:	4911      	ldr	r1, [pc, #68]	; (8000f4c <main+0xe4>)
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <main+0xd4>)
 8000f08:	f003 fe9f 	bl	8004c4a <f_write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <main+0xcc>)
 8000f12:	701a      	strb	r2, [r3, #0]

	 if(result == FR_OK) __NOP();
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <main+0xcc>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <main+0xb8>
 8000f1c:	bf00      	nop
 8000f1e:	e000      	b.n	8000f22 <main+0xba>
	 else __NOP();
 8000f20:	bf00      	nop
  }
  f_close(&file_pointer);
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <main+0xd4>)
 8000f24:	f004 f884 	bl	8005030 <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0xc0>
 8000f2a:	bf00      	nop
 8000f2c:	080051ac 	.word	0x080051ac
 8000f30:	200000a0 	.word	0x200000a0
 8000f34:	200002d0 	.word	0x200002d0
 8000f38:	080051b0 	.word	0x080051b0
 8000f3c:	200002d4 	.word	0x200002d4
 8000f40:	20000568 	.word	0x20000568
 8000f44:	20000504 	.word	0x20000504
 8000f48:	080051bc 	.word	0x080051bc
 8000f4c:	080051c8 	.word	0x080051c8

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 f910 	bl	8005184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <SystemClock_Config+0xcc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <SystemClock_Config+0xd0>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc4:	23a8      	movs	r3, #168	; 0xa8
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fcad 	bl	8001934 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe0:	f000 f89a 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2105      	movs	r1, #5
 8001002:	4618      	mov	r0, r3
 8001004:	f000 ff0e 	bl	8001e24 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100e:	f000 f883 	bl	8001118 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	; 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_SPI2_Init+0x64>)
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <MX_SPI2_Init+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_SPI2_Init+0x64>)
 8001030:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001034:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_SPI2_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_SPI2_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_SPI2_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_SPI2_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_SPI2_Init+0x64>)
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_SPI2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <MX_SPI2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_SPI2_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_SPI2_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_SPI2_Init+0x64>)
 8001070:	220a      	movs	r2, #10
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_SPI2_Init+0x64>)
 8001076:	f001 f8c1 	bl	80021fc <HAL_SPI_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001080:	f000 f84a 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000048 	.word	0x20000048
 800108c:	40003800 	.word	0x40003800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_GPIO_Init+0x80>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <MX_GPIO_Init+0x80>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_GPIO_Init+0x80>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_GPIO_Init+0x80>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <MX_GPIO_Init+0x80>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_GPIO_Init+0x80>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_ChipSelect_GPIO_Port, SD_CARD_ChipSelect_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <MX_GPIO_Init+0x84>)
 80010e6:	f000 fc0b 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CARD_ChipSelect_Pin */
  GPIO_InitStruct.Pin = SD_CARD_ChipSelect_Pin;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CARD_ChipSelect_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_GPIO_Init+0x84>)
 8001104:	f000 fa60 	bl	80015c8 <HAL_GPIO_Init>

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40020400 	.word	0x40020400

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_MspInit+0x4c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x4c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12c      	bne.n	80011f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SPI_MspInit+0x88>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e0:	2305      	movs	r3, #5
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_SPI_MspInit+0x8c>)
 80011ec:	f000 f9ec 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40003800 	.word	0x40003800
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020400 	.word	0x40020400

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f890 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x20>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SystemInit+0x20>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001298:	4c0b      	ldr	r4, [pc, #44]	; (80012c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a6:	f7ff ffd7 	bl	8001258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f003 ff47 	bl	800513c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fddb 	bl	8000e68 <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80012c0:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 80012c4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80012c8:	200005ac 	.word	0x200005ac

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f931 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff ff0e 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f93b 	bl	80015ae <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f911 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000004 	.word	0x20000004
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000008 	.word	0x20000008

08001374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x20>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x24>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_IncTick+0x24>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000000c 	.word	0x2000000c
 8001398:	2000056c 	.word	0x2000056c

0800139c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_GetTick+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000056c 	.word	0x2000056c

080013b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d005      	beq.n	80013da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_Delay+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013da:	bf00      	nop
 80013dc:	f7ff ffde 	bl	800139c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d8f7      	bhi.n	80013dc <HAL_Delay+0x28>
  {
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000000c 	.word	0x2000000c

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff47 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff5c 	bl	8001444 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffb0 	bl	800151c <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e16b      	b.n	80018bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 815a 	bne.w	80018b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d005      	beq.n	800161a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001616:	2b02      	cmp	r3, #2
 8001618:	d130      	bne.n	800167c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80b4 	beq.w	80018b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <HAL_GPIO_Init+0x30c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a5f      	ldr	r2, [pc, #380]	; (80018d4 <HAL_GPIO_Init+0x30c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <HAL_GPIO_Init+0x30c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a5b      	ldr	r2, [pc, #364]	; (80018d8 <HAL_GPIO_Init+0x310>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_GPIO_Init+0x314>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_GPIO_Init+0x226>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_GPIO_Init+0x318>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d025      	beq.n	80017ea <HAL_GPIO_Init+0x222>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a50      	ldr	r2, [pc, #320]	; (80018e4 <HAL_GPIO_Init+0x31c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01f      	beq.n	80017e6 <HAL_GPIO_Init+0x21e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4f      	ldr	r2, [pc, #316]	; (80018e8 <HAL_GPIO_Init+0x320>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_GPIO_Init+0x21a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4e      	ldr	r2, [pc, #312]	; (80018ec <HAL_GPIO_Init+0x324>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0x216>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <HAL_GPIO_Init+0x328>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_Init+0x212>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_GPIO_Init+0x32c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_Init+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4b      	ldr	r2, [pc, #300]	; (80018f8 <HAL_GPIO_Init+0x330>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_Init+0x20a>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e00e      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017d2:	2308      	movs	r3, #8
 80017d4:	e00c      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017d6:	2306      	movs	r3, #6
 80017d8:	e00a      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017da:	2305      	movs	r3, #5
 80017dc:	e008      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017de:	2304      	movs	r3, #4
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x228>
 80017ee:	2300      	movs	r3, #0
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f002 0203 	and.w	r2, r2, #3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001800:	4935      	ldr	r1, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x310>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_GPIO_Init+0x334>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <HAL_GPIO_Init+0x334>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_GPIO_Init+0x334>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_GPIO_Init+0x334>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_GPIO_Init+0x334>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x334>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_GPIO_Init+0x334>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_GPIO_Init+0x334>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b0f      	cmp	r3, #15
 80018c0:	f67f ae90 	bls.w	80015e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40013800 	.word	0x40013800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40021400 	.word	0x40021400
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40021c00 	.word	0x40021c00
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e267      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d075      	beq.n	8001a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d00c      	beq.n	8001978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001966:	2b08      	cmp	r3, #8
 8001968:	d112      	bne.n	8001990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196a:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001976:	d10b      	bne.n	8001990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4b7e      	ldr	r3, [pc, #504]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d05b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x108>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d157      	bne.n	8001a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e242      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_OscConfig+0x74>
 800199a:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0xb0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b2:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6f      	ldr	r2, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6c      	ldr	r2, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0xb0>
 80019cc:	4b69      	ldr	r3, [pc, #420]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a68      	ldr	r2, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fcd6 	bl	800139c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff fcd2 	bl	800139c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e207      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fcc2 	bl	800139c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fcbe 	bl	800139c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1f3      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x152>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1c7      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4937      	ldr	r1, [pc, #220]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_OscConfig+0x244>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fc77 	bl	800139c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fc73 	bl	800139c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1a8      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4925      	ldr	r1, [pc, #148]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x244>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fc56 	bl	800139c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fc52 	bl	800139c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e187      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_OscConfig+0x248>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fc36 	bl	800139c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc32 	bl	800139c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e167      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x200>
 8001b52:	e01b      	b.n	8001b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_OscConfig+0x248>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fc1f 	bl	800139c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	e00e      	b.n	8001b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff fc1b 	bl	800139c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d907      	bls.n	8001b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e150      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ea      	bne.n	8001b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8097 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b7d      	ldr	r3, [pc, #500]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a7c      	ldr	r2, [pc, #496]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a73      	ldr	r2, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fbdb 	bl	800139c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff fbd7 	bl	800139c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e10c      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2ea>
 8001c10:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a63      	ldr	r2, [pc, #396]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x324>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x30c>
 8001c26:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0x324>
 8001c40:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a57      	ldr	r2, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a54      	ldr	r2, [pc, #336]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff fb9c 	bl	800139c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff fb98 	bl	800139c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0cb      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ee      	beq.n	8001c68 <HAL_RCC_OscConfig+0x334>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fb86 	bl	800139c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff fb82 	bl	800139c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0b5      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a38      	ldr	r2, [pc, #224]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a1 	beq.w	8001e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d05c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d141      	bne.n	8001d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_OscConfig+0x478>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fb56 	bl	800139c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff fb52 	bl	800139c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e087      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	491b      	ldr	r1, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x478>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fb2b 	bl	800139c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff fb27 	bl	800139c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e05c      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x416>
 8001d68:	e054      	b.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_RCC_OscConfig+0x478>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fb14 	bl	800139c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff fb10 	bl	800139c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e045      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x444>
 8001d96:	e03d      	b.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e038      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000
 8001dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x4ec>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d028      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d121      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d111      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0cc      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d90c      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d044      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d119      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e067      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 0203 	bic.w	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4934      	ldr	r1, [pc, #208]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f14:	f7ff fa42 	bl	800139c <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7ff fa3e 	bl	800139c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e04f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 020c 	and.w	r2, r3, #12
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1eb      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d20c      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e032      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001faa:	f000 f821 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f9a2 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	08005220 	.word	0x08005220
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	20000008 	.word	0x20000008

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff4:	b094      	sub	sp, #80	; 0x50
 8001ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002000:	2300      	movs	r3, #0
 8002002:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002008:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d00d      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x40>
 8002014:	2b08      	cmp	r3, #8
 8002016:	f200 80e1 	bhi.w	80021dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x34>
 800201e:	2b04      	cmp	r3, #4
 8002020:	d003      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x3a>
 8002022:	e0db      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b73      	ldr	r3, [pc, #460]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002028:	e0db      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800202e:	e0d8      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002030:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203a:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	2200      	movs	r2, #0
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002050:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
 800205e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	f04f 0000 	mov.w	r0, #0
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	0159      	lsls	r1, r3, #5
 8002070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002074:	0150      	lsls	r0, r2, #5
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4621      	mov	r1, r4
 800207c:	1a51      	subs	r1, r2, r1
 800207e:	6139      	str	r1, [r7, #16]
 8002080:	4629      	mov	r1, r5
 8002082:	eb63 0301 	sbc.w	r3, r3, r1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002094:	4659      	mov	r1, fp
 8002096:	018b      	lsls	r3, r1, #6
 8002098:	4651      	mov	r1, sl
 800209a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209e:	4651      	mov	r1, sl
 80020a0:	018a      	lsls	r2, r1, #6
 80020a2:	4651      	mov	r1, sl
 80020a4:	ebb2 0801 	subs.w	r8, r2, r1
 80020a8:	4659      	mov	r1, fp
 80020aa:	eb63 0901 	sbc.w	r9, r3, r1
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	eb18 0303 	adds.w	r3, r8, r3
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	462b      	mov	r3, r5
 80020d0:	eb49 0303 	adc.w	r3, r9, r3
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020e2:	4629      	mov	r1, r5
 80020e4:	024b      	lsls	r3, r1, #9
 80020e6:	4621      	mov	r1, r4
 80020e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ec:	4621      	mov	r1, r4
 80020ee:	024a      	lsls	r2, r1, #9
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f6:	2200      	movs	r2, #0
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002100:	f7fe f862 	bl	80001c8 <__aeabi_uldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4613      	mov	r3, r2
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800210c:	e058      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	4618      	mov	r0, r3
 8002118:	4611      	mov	r1, r2
 800211a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800211e:	623b      	str	r3, [r7, #32]
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	f04f 0000 	mov.w	r0, #0
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	0159      	lsls	r1, r3, #5
 8002136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213a:	0150      	lsls	r0, r2, #5
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4641      	mov	r1, r8
 8002142:	ebb2 0a01 	subs.w	sl, r2, r1
 8002146:	4649      	mov	r1, r9
 8002148:	eb63 0b01 	sbc.w	fp, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800215c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002160:	ebb2 040a 	subs.w	r4, r2, sl
 8002164:	eb63 050b 	sbc.w	r5, r3, fp
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	00eb      	lsls	r3, r5, #3
 8002172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002176:	00e2      	lsls	r2, r4, #3
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	4643      	mov	r3, r8
 800217e:	18e3      	adds	r3, r4, r3
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	464b      	mov	r3, r9
 8002184:	eb45 0303 	adc.w	r3, r5, r3
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021aa:	2200      	movs	r2, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	61fa      	str	r2, [r7, #28]
 80021b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b4:	f7fe f808 	bl	80001c8 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3750      	adds	r7, #80	; 0x50
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07b      	b.n	8002306 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800221e:	d009      	beq.n	8002234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
 8002226:	e005      	b.n	8002234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe ff90 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	ea42 0103 	orr.w	r1, r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	f003 0104 	and.w	r1, r3, #4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f003 0210 	and.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b088      	sub	sp, #32
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_SPI_Transmit+0x22>
 800232c:	2302      	movs	r3, #2
 800232e:	e126      	b.n	800257e <HAL_SPI_Transmit+0x270>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002338:	f7ff f830 	bl	800139c <HAL_GetTick>
 800233c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d002      	beq.n	8002354 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002352:	e10b      	b.n	800256c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_SPI_Transmit+0x52>
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002364:	e102      	b.n	800256c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ac:	d10f      	bne.n	80023ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d007      	beq.n	80023ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f4:	d14b      	bne.n	800248e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_SPI_Transmit+0xf6>
 80023fe:	8afb      	ldrh	r3, [r7, #22]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d13e      	bne.n	8002482 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	1c9a      	adds	r2, r3, #2
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002428:	e02b      	b.n	8002482 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d112      	bne.n	800245e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	1c9a      	adds	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	86da      	strh	r2, [r3, #54]	; 0x36
 800245c:	e011      	b.n	8002482 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245e:	f7fe ff9d 	bl	800139c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d803      	bhi.n	8002476 <HAL_SPI_Transmit+0x168>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d102      	bne.n	800247c <HAL_SPI_Transmit+0x16e>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002480:	e074      	b.n	800256c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ce      	bne.n	800242a <HAL_SPI_Transmit+0x11c>
 800248c:	e04c      	b.n	8002528 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_SPI_Transmit+0x18e>
 8002496:	8afb      	ldrh	r3, [r7, #22]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d140      	bne.n	800251e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	330c      	adds	r3, #12
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024c2:	e02c      	b.n	800251e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d113      	bne.n	80024fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80024f8:	e011      	b.n	800251e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024fa:	f7fe ff4f 	bl	800139c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d803      	bhi.n	8002512 <HAL_SPI_Transmit+0x204>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d102      	bne.n	8002518 <HAL_SPI_Transmit+0x20a>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800251c:	e026      	b.n	800256c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1cd      	bne.n	80024c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fa55 	bl	80029dc <SPI_EndRxTxTransaction>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
 8002568:	e000      	b.n	800256c <HAL_SPI_Transmit+0x25e>
  }

error:
 800256a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800257c:	7ffb      	ldrb	r3, [r7, #31]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08c      	sub	sp, #48	; 0x30
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x26>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e18a      	b.n	80028c2 <HAL_SPI_TransmitReceive+0x33c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025b4:	f7fe fef2 	bl	800139c <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d00f      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x70>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025dc:	d107      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_SPI_TransmitReceive+0x68>
 80025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d003      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025f4:	e15b      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x82>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x82>
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800260e:	e14e      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b04      	cmp	r3, #4
 800261a:	d003      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2205      	movs	r2, #5
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d007      	beq.n	8002678 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d178      	bne.n	8002774 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_SPI_TransmitReceive+0x10a>
 800268a:	8b7b      	ldrh	r3, [r7, #26]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d166      	bne.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	1c9a      	adds	r2, r3, #2
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	e053      	b.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d11b      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x176>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x176>
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d113      	bne.n	80026fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d119      	bne.n	800273e <HAL_SPI_TransmitReceive+0x1b8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d014      	beq.n	800273e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	b292      	uxth	r2, r2
 8002720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800273a:	2301      	movs	r3, #1
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800273e:	f7fe fe2d 	bl	800139c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800274a:	429a      	cmp	r2, r3
 800274c:	d807      	bhi.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d003      	beq.n	800275e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800275c:	e0a7      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1a6      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x130>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1a1      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x130>
 8002772:	e07c      	b.n	800286e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x1fc>
 800277c:	8b7b      	ldrh	r3, [r7, #26]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d16b      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a8:	e057      	b.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d11c      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d017      	beq.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d114      	bne.n	80027f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	330c      	adds	r3, #12
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x2ae>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d014      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002830:	2301      	movs	r3, #1
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002834:	f7fe fdb2 	bl	800139c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002840:	429a      	cmp	r2, r3
 8002842:	d803      	bhi.n	800284c <HAL_SPI_TransmitReceive+0x2c6>
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d102      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x2cc>
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002858:	e029      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1a2      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x224>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d19d      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8b2 	bl	80029dc <SPI_EndRxTxTransaction>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800288a:	e010      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	e000      	b.n	80028ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80028ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3730      	adds	r7, #48	; 0x30
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028dc:	f7fe fd5e 	bl	800139c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028ec:	f7fe fd56 	bl	800139c <HAL_GetTick>
 80028f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	fb02 f303 	mul.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002902:	e054      	b.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290a:	d050      	beq.n	80029ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800290c:	f7fe fd46 	bl	800139c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	429a      	cmp	r2, r3
 800291a:	d902      	bls.n	8002922 <SPI_WaitFlagStateUntilTimeout+0x56>
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d13d      	bne.n	800299e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d111      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002944:	d004      	beq.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d107      	bne.n	8002960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002968:	d10f      	bne.n	800298a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e017      	b.n	80029ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d19b      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000004 	.word	0x20000004

080029dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <SPI_EndRxTxTransaction+0x7c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <SPI_EndRxTxTransaction+0x80>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0d5b      	lsrs	r3, r3, #21
 80029f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029f8:	fb02 f303 	mul.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d112      	bne.n	8002a2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff5a 	bl	80028cc <SPI_WaitFlagStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e00f      	b.n	8002a4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d0f2      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x52>
 8002a48:	e000      	b.n	8002a4c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a4a:	bf00      	nop
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	165e9f81 	.word	0x165e9f81

08002a60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <MX_FATFS_Init+0x18>)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_FATFS_Init+0x1c>)
 8002a68:	f002 fb58 	bl	800511c <FATFS_LinkDriver>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <MX_FATFS_Init+0x20>)
 8002a72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000574 	.word	0x20000574
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	20000570 	.word	0x20000570

08002a84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002a88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fecb 	bl	800083c <SD_disk_initialize>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd ffa2 	bl	8000a08 <SD_disk_status>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002ae0:	7bf8      	ldrb	r0, [r7, #15]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	f7fd ffa4 	bl	8000a34 <SD_disk_read>
 8002aec:	4603      	mov	r3, r0
 8002aee:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4603      	mov	r3, r0
 8002b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002b08:	7bf8      	ldrb	r0, [r7, #15]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	f7fd fffa 	bl	8000b08 <SD_disk_write>
 8002b14:	4603      	mov	r3, r0
 8002b16:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	603a      	str	r2, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	79b9      	ldrb	r1, [r7, #6]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f86a 	bl	8000c10 <SD_disk_ioctl>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <disk_status+0x30>)
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	4905      	ldr	r1, [pc, #20]	; (8002b78 <disk_status+0x30>)
 8002b62:	440a      	add	r2, r1
 8002b64:	7a12      	ldrb	r2, [r2, #8]
 8002b66:	4610      	mov	r0, r2
 8002b68:	4798      	blx	r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200005a0 	.word	0x200005a0

08002b7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <disk_initialize+0x48>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d111      	bne.n	8002bb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <disk_initialize+0x48>)
 8002b98:	2101      	movs	r1, #1
 8002b9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <disk_initialize+0x48>)
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	4906      	ldr	r1, [pc, #24]	; (8002bc4 <disk_initialize+0x48>)
 8002bac:	440a      	add	r2, r1
 8002bae:	7a12      	ldrb	r2, [r2, #8]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4798      	blx	r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200005a0 	.word	0x200005a0

08002bc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <disk_read+0x3c>)
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	689c      	ldr	r4, [r3, #8]
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <disk_read+0x3c>)
 8002be8:	4413      	add	r3, r2
 8002bea:	7a18      	ldrb	r0, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	47a0      	blx	r4
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200005a0 	.word	0x200005a0

08002c08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <disk_write+0x3c>)
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68dc      	ldr	r4, [r3, #12]
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <disk_write+0x3c>)
 8002c28:	4413      	add	r3, r2
 8002c2a:	7a18      	ldrb	r0, [r3, #8]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	47a0      	blx	r4
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]
  return res;
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200005a0 	.word	0x200005a0

08002c48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	603a      	str	r2, [r7, #0]
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	460b      	mov	r3, r1
 8002c56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <disk_ioctl+0x38>)
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	79fa      	ldrb	r2, [r7, #7]
 8002c66:	4906      	ldr	r1, [pc, #24]	; (8002c80 <disk_ioctl+0x38>)
 8002c68:	440a      	add	r2, r1
 8002c6a:	7a10      	ldrb	r0, [r2, #8]
 8002c6c:	79b9      	ldrb	r1, [r7, #6]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4798      	blx	r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	73fb      	strb	r3, [r7, #15]
  return res;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200005a0 	.word	0x200005a0

08002c84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002ca6:	89fb      	ldrh	r3, [r7, #14]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3303      	adds	r3, #3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	3202      	adds	r2, #2
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	3201      	adds	r2, #1
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
	return rv;
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	1c53      	adds	r3, r2, #1
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1c59      	adds	r1, r3, #1
 8002dac:	6179      	str	r1, [r7, #20]
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f1      	bne.n	8002da2 <mem_cpy+0x1a>
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002dca:	b480      	push	{r7}
 8002dcc:	b087      	sub	sp, #28
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	617a      	str	r2, [r7, #20]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f3      	bne.n	8002dda <mem_set+0x10>
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	61fa      	str	r2, [r7, #28]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	61ba      	str	r2, [r7, #24]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <mem_cmp+0x40>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0eb      	beq.n	8002e18 <mem_cmp+0x18>

	return r;
 8002e40:	697b      	ldr	r3, [r7, #20]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002e58:	e002      	b.n	8002e60 <chk_chr+0x12>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <chk_chr+0x26>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d1f2      	bne.n	8002e5a <chk_chr+0xc>
	return *str;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	781b      	ldrb	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e029      	b.n	8002eec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002e98:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <chk_lock+0xb4>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	4413      	add	r3, r2
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01d      	beq.n	8002ee2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <chk_lock+0xb4>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d116      	bne.n	8002ee6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <chk_lock+0xb4>)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d10c      	bne.n	8002ee6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002ecc:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <chk_lock+0xb4>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d102      	bne.n	8002ee6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002ee0:	e007      	b.n	8002ef2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d9d2      	bls.n	8002e98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d109      	bne.n	8002f0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <chk_lock+0x80>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d101      	bne.n	8002f08 <chk_lock+0x84>
 8002f04:	2300      	movs	r3, #0
 8002f06:	e010      	b.n	8002f2a <chk_lock+0xa6>
 8002f08:	2312      	movs	r3, #18
 8002f0a:	e00e      	b.n	8002f2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d108      	bne.n	8002f24 <chk_lock+0xa0>
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <chk_lock+0xb4>)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	4413      	add	r3, r2
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d101      	bne.n	8002f28 <chk_lock+0xa4>
 8002f24:	2310      	movs	r3, #16
 8002f26:	e000      	b.n	8002f2a <chk_lock+0xa6>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000580 	.word	0x20000580

08002f3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e002      	b.n	8002f4e <enq_lock+0x12>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d806      	bhi.n	8002f62 <enq_lock+0x26>
 8002f54:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <enq_lock+0x40>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	4413      	add	r3, r2
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f2      	bne.n	8002f48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000580 	.word	0x20000580

08002f80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e01f      	b.n	8002fd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002f90:	4a41      	ldr	r2, [pc, #260]	; (8003098 <inc_lock+0x118>)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4413      	add	r3, r2
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d113      	bne.n	8002fca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002fa2:	4a3d      	ldr	r2, [pc, #244]	; (8003098 <inc_lock+0x118>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d109      	bne.n	8002fca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002fb6:	4a38      	ldr	r2, [pc, #224]	; (8003098 <inc_lock+0x118>)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d006      	beq.n	8002fd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d9dc      	bls.n	8002f90 <inc_lock+0x10>
 8002fd6:	e000      	b.n	8002fda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002fd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d132      	bne.n	8003046 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e002      	b.n	8002fec <inc_lock+0x6c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d806      	bhi.n	8003000 <inc_lock+0x80>
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <inc_lock+0x118>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4413      	add	r3, r2
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f2      	bne.n	8002fe6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d101      	bne.n	800300a <inc_lock+0x8a>
 8003006:	2300      	movs	r3, #0
 8003008:	e040      	b.n	800308c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <inc_lock+0x118>)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	440b      	add	r3, r1
 8003016:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	491e      	ldr	r1, [pc, #120]	; (8003098 <inc_lock+0x118>)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	440b      	add	r3, r1
 8003024:	3304      	adds	r3, #4
 8003026:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	491a      	ldr	r1, [pc, #104]	; (8003098 <inc_lock+0x118>)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	440b      	add	r3, r1
 8003034:	3308      	adds	r3, #8
 8003036:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <inc_lock+0x118>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4413      	add	r3, r2
 8003040:	330c      	adds	r3, #12
 8003042:	2200      	movs	r2, #0
 8003044:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <inc_lock+0xe0>
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <inc_lock+0x118>)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	4413      	add	r3, r2
 8003054:	330c      	adds	r3, #12
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <inc_lock+0xe0>
 800305c:	2300      	movs	r3, #0
 800305e:	e015      	b.n	800308c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <inc_lock+0xf8>
 8003066:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <inc_lock+0x118>)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	4413      	add	r3, r2
 800306e:	330c      	adds	r3, #12
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	e001      	b.n	800307c <inc_lock+0xfc>
 8003078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307c:	4906      	ldr	r1, [pc, #24]	; (8003098 <inc_lock+0x118>)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	440b      	add	r3, r1
 8003084:	330c      	adds	r3, #12
 8003086:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000580 	.word	0x20000580

0800309c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d825      	bhi.n	80030fc <dec_lock+0x60>
		n = Files[i].ctr;
 80030b0:	4a17      	ldr	r2, [pc, #92]	; (8003110 <dec_lock+0x74>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4413      	add	r3, r2
 80030b8:	330c      	adds	r3, #12
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80030be:	89fb      	ldrh	r3, [r7, #14]
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c4:	d101      	bne.n	80030ca <dec_lock+0x2e>
 80030c6:	2300      	movs	r3, #0
 80030c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <dec_lock+0x3a>
 80030d0:	89fb      	ldrh	r3, [r7, #14]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <dec_lock+0x74>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	4413      	add	r3, r2
 80030de:	330c      	adds	r3, #12
 80030e0:	89fa      	ldrh	r2, [r7, #14]
 80030e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80030e4:	89fb      	ldrh	r3, [r7, #14]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <dec_lock+0x5a>
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <dec_lock+0x74>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	4413      	add	r3, r2
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	737b      	strb	r3, [r7, #13]
 80030fa:	e001      	b.n	8003100 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80030fc:	2302      	movs	r3, #2
 80030fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003100:	7b7b      	ldrb	r3, [r7, #13]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000580 	.word	0x20000580

08003114 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e010      	b.n	8003144 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <clear_lock+0x44>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	4413      	add	r3, r2
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d105      	bne.n	800313e <clear_lock+0x2a>
 8003132:	4a09      	ldr	r2, [pc, #36]	; (8003158 <clear_lock+0x44>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3301      	adds	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d9eb      	bls.n	8003122 <clear_lock+0xe>
	}
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20000580 	.word	0x20000580

0800315c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	78db      	ldrb	r3, [r3, #3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d034      	beq.n	80031da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7858      	ldrb	r0, [r3, #1]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003180:	2301      	movs	r3, #1
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	f7ff fd40 	bl	8002c08 <disk_write>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <sync_window+0x38>
			res = FR_DISK_ERR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e022      	b.n	80031da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d217      	bcs.n	80031da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	789b      	ldrb	r3, [r3, #2]
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e010      	b.n	80031d4 <sync_window+0x78>
					wsect += fs->fsize;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4413      	add	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7858      	ldrb	r0, [r3, #1]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80031c6:	2301      	movs	r3, #1
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	f7ff fd1d 	bl	8002c08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d8eb      	bhi.n	80031b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d01b      	beq.n	8003234 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ffad 	bl	800315c <sync_window>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d113      	bne.n	8003234 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7858      	ldrb	r0, [r3, #1]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003216:	2301      	movs	r3, #1
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	f7ff fcd5 	bl	8002bc8 <disk_read>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff87 	bl	800315c <sync_window>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d158      	bne.n	800330a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d148      	bne.n	80032f2 <sync_fs+0xb2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d144      	bne.n	80032f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3330      	adds	r3, #48	; 0x30
 800326c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fda9 	bl	8002dca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3330      	adds	r3, #48	; 0x30
 800327c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003280:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fd38 	bl	8002cfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3330      	adds	r3, #48	; 0x30
 800328e:	4921      	ldr	r1, [pc, #132]	; (8003314 <sync_fs+0xd4>)
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fd4d 	bl	8002d30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3330      	adds	r3, #48	; 0x30
 800329a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800329e:	491e      	ldr	r1, [pc, #120]	; (8003318 <sync_fs+0xd8>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fd45 	bl	8002d30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3330      	adds	r3, #48	; 0x30
 80032aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f7ff fd3b 	bl	8002d30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3330      	adds	r3, #48	; 0x30
 80032be:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4619      	mov	r1, r3
 80032c8:	4610      	mov	r0, r2
 80032ca:	f7ff fd31 	bl	8002d30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7858      	ldrb	r0, [r3, #1]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e6:	2301      	movs	r3, #1
 80032e8:	f7ff fc8e 	bl	8002c08 <disk_write>
			fs->fsi_flag = 0;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	785b      	ldrb	r3, [r3, #1]
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fca4 	bl	8002c48 <disk_ioctl>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <sync_fs+0xca>
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	41615252 	.word	0x41615252
 8003318:	61417272 	.word	0x61417272

0800331c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	3b02      	subs	r3, #2
 800332a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	3b02      	subs	r3, #2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d301      	bcc.n	800333c <clust2sect+0x20>
 8003338:	2300      	movs	r3, #0
 800333a:	e008      	b.n	800334e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	895b      	ldrh	r3, [r3, #10]
 8003340:	461a      	mov	r2, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	fb03 f202 	mul.w	r2, r3, r2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	4413      	add	r3, r2
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d904      	bls.n	800337a <get_fat+0x20>
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <get_fat+0x26>
		val = 1;	/* Internal error */
 800337a:	2301      	movs	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	e08f      	b.n	80034a0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003380:	f04f 33ff 	mov.w	r3, #4294967295
 8003384:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d062      	beq.n	8003454 <get_fat+0xfa>
 800338e:	2b03      	cmp	r3, #3
 8003390:	dc7c      	bgt.n	800348c <get_fat+0x132>
 8003392:	2b01      	cmp	r3, #1
 8003394:	d002      	beq.n	800339c <get_fat+0x42>
 8003396:	2b02      	cmp	r3, #2
 8003398:	d042      	beq.n	8003420 <get_fat+0xc6>
 800339a:	e077      	b.n	800348c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6a1a      	ldr	r2, [r3, #32]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0a5b      	lsrs	r3, r3, #9
 80033b2:	4413      	add	r3, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	6938      	ldr	r0, [r7, #16]
 80033b8:	f7ff ff14 	bl	80031e4 <move_window>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d167      	bne.n	8003492 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	4413      	add	r3, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	6938      	ldr	r0, [r7, #16]
 80033e4:	f7ff fefe 	bl	80031e4 <move_window>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d153      	bne.n	8003496 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <get_fat+0xbc>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	e002      	b.n	800341c <get_fat+0xc2>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	617b      	str	r3, [r7, #20]
			break;
 800341e:	e03f      	b.n	80034a0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6a1a      	ldr	r2, [r3, #32]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	4413      	add	r3, r2
 800342a:	4619      	mov	r1, r3
 800342c:	6938      	ldr	r0, [r7, #16]
 800342e:	f7ff fed9 	bl	80031e4 <move_window>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d130      	bne.n	800349a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003446:	4413      	add	r3, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fc1b 	bl	8002c84 <ld_word>
 800344e:	4603      	mov	r3, r0
 8003450:	617b      	str	r3, [r7, #20]
			break;
 8003452:	e025      	b.n	80034a0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	09db      	lsrs	r3, r3, #7
 800345c:	4413      	add	r3, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6938      	ldr	r0, [r7, #16]
 8003462:	f7ff febf 	bl	80031e4 <move_window>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d118      	bne.n	800349e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800347a:	4413      	add	r3, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fc19 	bl	8002cb4 <ld_dword>
 8003482:	4603      	mov	r3, r0
 8003484:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003488:	617b      	str	r3, [r7, #20]
			break;
 800348a:	e009      	b.n	80034a0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800348c:	2301      	movs	r3, #1
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e006      	b.n	80034a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003492:	bf00      	nop
 8003494:	e004      	b.n	80034a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800349e:	bf00      	nop
		}
	}

	return val;
 80034a0:	697b      	ldr	r3, [r7, #20]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80034aa:	b590      	push	{r4, r7, lr}
 80034ac:	b089      	sub	sp, #36	; 0x24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	f240 80d2 	bls.w	8003666 <put_fat+0x1bc>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f080 80cc 	bcs.w	8003666 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f000 8096 	beq.w	8003604 <put_fat+0x15a>
 80034d8:	2b03      	cmp	r3, #3
 80034da:	f300 80cd 	bgt.w	8003678 <put_fat+0x1ce>
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d002      	beq.n	80034e8 <put_fat+0x3e>
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d06e      	beq.n	80035c4 <put_fat+0x11a>
 80034e6:	e0c7      	b.n	8003678 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1a      	ldr	r2, [r3, #32]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	4413      	add	r3, r2
 8003500:	4619      	mov	r1, r3
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff fe6e 	bl	80031e4 <move_window>
 8003508:	4603      	mov	r3, r0
 800350a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 80ab 	bne.w	800366a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1c59      	adds	r1, r3, #1
 800351e:	61b9      	str	r1, [r7, #24]
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	4413      	add	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <put_fat+0xa4>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b25b      	sxtb	r3, r3
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	b25a      	sxtb	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	b25b      	sxtb	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b25b      	sxtb	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e001      	b.n	8003552 <put_fat+0xa8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	0a5b      	lsrs	r3, r3, #9
 8003564:	4413      	add	r3, r2
 8003566:	4619      	mov	r1, r3
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fe3b 	bl	80031e4 <move_window>
 800356e:	4603      	mov	r3, r0
 8003570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d17a      	bne.n	800366e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003584:	4413      	add	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <put_fat+0xf0>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e00e      	b.n	80035b8 <put_fat+0x10e>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	f023 030f 	bic.w	r3, r3, #15
 80035a4:	b25a      	sxtb	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	70da      	strb	r2, [r3, #3]
			break;
 80035c2:	e059      	b.n	8003678 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1a      	ldr	r2, [r3, #32]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	4413      	add	r3, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fe07 	bl	80031e4 <move_window>
 80035d6:	4603      	mov	r3, r0
 80035d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80035da:	7ffb      	ldrb	r3, [r7, #31]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d148      	bne.n	8003672 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80035ee:	4413      	add	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	b292      	uxth	r2, r2
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fb7f 	bl	8002cfa <st_word>
			fs->wflag = 1;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	70da      	strb	r2, [r3, #3]
			break;
 8003602:	e039      	b.n	8003678 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	09db      	lsrs	r3, r3, #7
 800360c:	4413      	add	r3, r2
 800360e:	4619      	mov	r1, r3
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff fde7 	bl	80031e4 <move_window>
 8003616:	4603      	mov	r3, r0
 8003618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800361a:	7ffb      	ldrb	r3, [r7, #31]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d12a      	bne.n	8003676 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003634:	4413      	add	r3, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fb3c 	bl	8002cb4 <ld_dword>
 800363c:	4603      	mov	r3, r0
 800363e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003642:	4323      	orrs	r3, r4
 8003644:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003654:	4413      	add	r3, r2
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fb69 	bl	8002d30 <st_dword>
			fs->wflag = 1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	70da      	strb	r2, [r3, #3]
			break;
 8003664:	e008      	b.n	8003678 <put_fat+0x1ce>
		}
	}
 8003666:	bf00      	nop
 8003668:	e006      	b.n	8003678 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800366a:	bf00      	nop
 800366c:	e004      	b.n	8003678 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003676:	bf00      	nop
	return res;
 8003678:	7ffb      	ldrb	r3, [r7, #31]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b088      	sub	sp, #32
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d904      	bls.n	80036a8 <remove_chain+0x26>
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d301      	bcc.n	80036ac <remove_chain+0x2a>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e04b      	b.n	8003744 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00c      	beq.n	80036cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80036b2:	f04f 32ff 	mov.w	r2, #4294967295
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	69b8      	ldr	r0, [r7, #24]
 80036ba:	f7ff fef6 	bl	80034aa <put_fat>
 80036be:	4603      	mov	r3, r0
 80036c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80036c2:	7ffb      	ldrb	r3, [r7, #31]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <remove_chain+0x4a>
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
 80036ca:	e03b      	b.n	8003744 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff fe43 	bl	800335a <get_fat>
 80036d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d031      	beq.n	8003740 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <remove_chain+0x64>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e02e      	b.n	8003744 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d101      	bne.n	80036f2 <remove_chain+0x70>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e028      	b.n	8003744 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80036f2:	2200      	movs	r2, #0
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	f7ff fed7 	bl	80034aa <put_fat>
 80036fc:	4603      	mov	r3, r0
 80036fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003700:	7ffb      	ldrb	r3, [r7, #31]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <remove_chain+0x88>
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	e01c      	b.n	8003744 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	3b02      	subs	r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d20b      	bcs.n	8003730 <remove_chain+0xae>
			fs->free_clst++;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	791b      	ldrb	r3, [r3, #4]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d3c6      	bcc.n	80036cc <remove_chain+0x4a>
 800373e:	e000      	b.n	8003742 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003740:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <create_chain+0x2c>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	d31b      	bcc.n	80037b0 <create_chain+0x64>
 8003778:	2301      	movs	r3, #1
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	e018      	b.n	80037b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fdea 	bl	800335a <get_fat>
 8003786:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d801      	bhi.n	8003792 <create_chain+0x46>
 800378e:	2301      	movs	r3, #1
 8003790:	e070      	b.n	8003874 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d101      	bne.n	800379e <create_chain+0x52>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	e06a      	b.n	8003874 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d201      	bcs.n	80037ac <create_chain+0x60>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	e063      	b.n	8003874 <create_chain+0x128>
		scl = clst;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	3301      	adds	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d307      	bcc.n	80037d4 <create_chain+0x88>
				ncl = 2;
 80037c4:	2302      	movs	r3, #2
 80037c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d901      	bls.n	80037d4 <create_chain+0x88>
 80037d0:	2300      	movs	r3, #0
 80037d2:	e04f      	b.n	8003874 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80037d4:	69f9      	ldr	r1, [r7, #28]
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fdbf 	bl	800335a <get_fat>
 80037dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d003      	beq.n	80037f2 <create_chain+0xa6>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d101      	bne.n	80037f6 <create_chain+0xaa>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	e03e      	b.n	8003874 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d1da      	bne.n	80037b4 <create_chain+0x68>
 80037fe:	2300      	movs	r3, #0
 8003800:	e038      	b.n	8003874 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003802:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	69f9      	ldr	r1, [r7, #28]
 800380a:	6938      	ldr	r0, [r7, #16]
 800380c:	f7ff fe4d 	bl	80034aa <put_fat>
 8003810:	4603      	mov	r3, r0
 8003812:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <create_chain+0xe2>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	6839      	ldr	r1, [r7, #0]
 8003824:	6938      	ldr	r0, [r7, #16]
 8003826:	f7ff fe40 	bl	80034aa <put_fat>
 800382a:	4603      	mov	r3, r0
 800382c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d116      	bne.n	8003862 <create_chain+0x116>
		fs->last_clst = ncl;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	3b02      	subs	r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d804      	bhi.n	8003852 <create_chain+0x106>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	791b      	ldrb	r3, [r3, #4]
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	711a      	strb	r2, [r3, #4]
 8003860:	e007      	b.n	8003872 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <create_chain+0x122>
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	e000      	b.n	8003870 <create_chain+0x124>
 800386e:	2301      	movs	r3, #1
 8003870:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003872:	69fb      	ldr	r3, [r7, #28]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	3304      	adds	r3, #4
 8003892:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	0a5b      	lsrs	r3, r3, #9
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	8952      	ldrh	r2, [r2, #10]
 800389c:	fbb3 f3f2 	udiv	r3, r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1d1a      	adds	r2, r3, #4
 80038a6:	613a      	str	r2, [r7, #16]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <clmt_clust+0x3a>
 80038b2:	2300      	movs	r3, #0
 80038b4:	e010      	b.n	80038d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d307      	bcc.n	80038ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3304      	adds	r3, #4
 80038ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80038cc:	e7e9      	b.n	80038a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80038ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4413      	add	r3, r2
}
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fa:	d204      	bcs.n	8003906 <dir_sdi+0x22>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <dir_sdi+0x26>
		return FR_INT_ERR;
 8003906:	2302      	movs	r3, #2
 8003908:	e063      	b.n	80039d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <dir_sdi+0x46>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d902      	bls.n	800392a <dir_sdi+0x46>
		clst = fs->dirbase;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10c      	bne.n	800394a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	8912      	ldrh	r2, [r2, #8]
 8003938:	4293      	cmp	r3, r2
 800393a:	d301      	bcc.n	8003940 <dir_sdi+0x5c>
 800393c:	2302      	movs	r3, #2
 800393e:	e048      	b.n	80039d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	61da      	str	r2, [r3, #28]
 8003948:	e029      	b.n	800399e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	895b      	ldrh	r3, [r3, #10]
 800394e:	025b      	lsls	r3, r3, #9
 8003950:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003952:	e019      	b.n	8003988 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fcfe 	bl	800335a <get_fat>
 800395e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d101      	bne.n	800396c <dir_sdi+0x88>
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d904      	bls.n	800397c <dir_sdi+0x98>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	d301      	bcc.n	8003980 <dir_sdi+0x9c>
 800397c:	2302      	movs	r3, #2
 800397e:	e028      	b.n	80039d2 <dir_sdi+0xee>
			ofs -= csz;
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d2e1      	bcs.n	8003954 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8003990:	6979      	ldr	r1, [r7, #20]
 8003992:	6938      	ldr	r0, [r7, #16]
 8003994:	f7ff fcc2 	bl	800331c <clust2sect>
 8003998:	4602      	mov	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <dir_sdi+0xcc>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e010      	b.n	80039d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	3320      	adds	r3, #32
 80039f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <dir_next+0x28>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a00:	d301      	bcc.n	8003a06 <dir_next+0x2c>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e0aa      	b.n	8003b5c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8098 	bne.w	8003b42 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	8912      	ldrh	r2, [r2, #8]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	f0c0 8088 	bcc.w	8003b42 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	61da      	str	r2, [r3, #28]
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e08f      	b.n	8003b5c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	0a5b      	lsrs	r3, r3, #9
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	8952      	ldrh	r2, [r2, #10]
 8003a44:	3a01      	subs	r2, #1
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d17a      	bne.n	8003b42 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7ff fc80 	bl	800335a <get_fat>
 8003a5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d801      	bhi.n	8003a66 <dir_next+0x8c>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e07a      	b.n	8003b5c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d101      	bne.n	8003a72 <dir_next+0x98>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e074      	b.n	8003b5c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d358      	bcc.n	8003b2e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	61da      	str	r2, [r3, #28]
 8003a88:	2304      	movs	r3, #4
 8003a8a:	e067      	b.n	8003b5c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f7ff fe59 	bl	800374c <create_chain>
 8003a9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <dir_next+0xcc>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e05a      	b.n	8003b5c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <dir_next+0xd6>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e055      	b.n	8003b5c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d101      	bne.n	8003abc <dir_next+0xe2>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e04f      	b.n	8003b5c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f7ff fb4d 	bl	800315c <sync_window>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <dir_next+0xf2>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e047      	b.n	8003b5c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3330      	adds	r3, #48	; 0x30
 8003ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff f977 	bl	8002dca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	6979      	ldr	r1, [r7, #20]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fc1a 	bl	800331c <clust2sect>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aee:	e012      	b.n	8003b16 <dir_next+0x13c>
						fs->wflag = 1;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff fb30 	bl	800315c <sync_window>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <dir_next+0x12c>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e02a      	b.n	8003b5c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	895b      	ldrh	r3, [r3, #10]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d3e6      	bcc.n	8003af0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff fbf0 	bl	800331c <clust2sect>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003b74:	2100      	movs	r1, #0
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff feb4 	bl	80038e4 <dir_sdi>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d12b      	bne.n	8003bde <dir_alloc+0x7a>
		n = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fb27 	bl	80031e4 <move_window>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11d      	bne.n	8003bdc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2be5      	cmp	r3, #229	; 0xe5
 8003ba8:	d004      	beq.n	8003bb4 <dir_alloc+0x50>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d102      	bne.n	8003bc8 <dir_alloc+0x64>
 8003bc2:	e00c      	b.n	8003bde <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003bc8:	2101      	movs	r1, #1
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff05 	bl	80039da <dir_next>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0d7      	beq.n	8003b8a <dir_alloc+0x26>
 8003bda:	e000      	b.n	8003bde <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003bdc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d101      	bne.n	8003be8 <dir_alloc+0x84>
 8003be4:	2307      	movs	r3, #7
 8003be6:	75fb      	strb	r3, [r7, #23]
	return res;
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	331a      	adds	r3, #26
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff f83f 	bl	8002c84 <ld_word>
 8003c06:	4603      	mov	r3, r0
 8003c08:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d109      	bne.n	8003c26 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f834 	bl	8002c84 <ld_word>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	331a      	adds	r3, #26
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	b292      	uxth	r2, r2
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f857 	bl	8002cfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d109      	bne.n	8003c68 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f103 0214 	add.w	r2, r3, #20
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff f849 	bl	8002cfa <st_word>
	}
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe2f 	bl	80038e4 <dir_sdi>
 8003c86:	4603      	mov	r3, r0
 8003c88:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <dir_find+0x24>
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	e03e      	b.n	8003d12 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6938      	ldr	r0, [r7, #16]
 8003c9c:	f7ff faa2 	bl	80031e4 <move_window>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d12f      	bne.n	8003d0a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <dir_find+0x4e>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	75fb      	strb	r3, [r7, #23]
 8003cbc:	e028      	b.n	8003d10 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	330b      	adds	r3, #11
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	330b      	adds	r3, #11
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <dir_find+0x86>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a18      	ldr	r0, [r3, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3324      	adds	r3, #36	; 0x24
 8003ce8:	220b      	movs	r2, #11
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7ff f888 	bl	8002e00 <mem_cmp>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fe6e 	bl	80039da <dir_next>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0c5      	beq.n	8003c94 <dir_find+0x24>
 8003d08:	e002      	b.n	8003d10 <dir_find+0xa0>
		if (res != FR_OK) break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003d0e:	bf00      	nop

	return res;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003d28:	2101      	movs	r1, #1
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff1a 	bl	8003b64 <dir_alloc>
 8003d30:	4603      	mov	r3, r0
 8003d32:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11c      	bne.n	8003d74 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	68b8      	ldr	r0, [r7, #8]
 8003d42:	f7ff fa4f 	bl	80031e4 <move_window>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d111      	bne.n	8003d74 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	2220      	movs	r2, #32
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff f836 	bl	8002dca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a18      	ldr	r0, [r3, #32]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	220b      	movs	r2, #11
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f7ff f80d 	bl	8002d88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2201      	movs	r2, #1
 8003d72:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003d96:	220b      	movs	r2, #11
 8003d98:	2120      	movs	r1, #32
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f7ff f815 	bl	8002dca <mem_set>
	si = i = 0; ni = 8;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	2308      	movs	r3, #8
 8003daa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	61fa      	str	r2, [r7, #28]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003dba:	7efb      	ldrb	r3, [r7, #27]
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d94e      	bls.n	8003e5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003dc0:	7efb      	ldrb	r3, [r7, #27]
 8003dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8003dc4:	d006      	beq.n	8003dd4 <create_name+0x54>
 8003dc6:	7efb      	ldrb	r3, [r7, #27]
 8003dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8003dca:	d110      	bne.n	8003dee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003dcc:	e002      	b.n	8003dd4 <create_name+0x54>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b2f      	cmp	r3, #47	; 0x2f
 8003dde:	d0f6      	beq.n	8003dce <create_name+0x4e>
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b5c      	cmp	r3, #92	; 0x5c
 8003dea:	d0f0      	beq.n	8003dce <create_name+0x4e>
			break;
 8003dec:	e038      	b.n	8003e60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003dee:	7efb      	ldrb	r3, [r7, #27]
 8003df0:	2b2e      	cmp	r3, #46	; 0x2e
 8003df2:	d003      	beq.n	8003dfc <create_name+0x7c>
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d30c      	bcc.n	8003e16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b0b      	cmp	r3, #11
 8003e00:	d002      	beq.n	8003e08 <create_name+0x88>
 8003e02:	7efb      	ldrb	r3, [r7, #27]
 8003e04:	2b2e      	cmp	r3, #46	; 0x2e
 8003e06:	d001      	beq.n	8003e0c <create_name+0x8c>
 8003e08:	2306      	movs	r3, #6
 8003e0a:	e044      	b.n	8003e96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	230b      	movs	r3, #11
 8003e12:	617b      	str	r3, [r7, #20]
			continue;
 8003e14:	e022      	b.n	8003e5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003e16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da04      	bge.n	8003e28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003e1e:	7efb      	ldrb	r3, [r7, #27]
 8003e20:	3b80      	subs	r3, #128	; 0x80
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <create_name+0x120>)
 8003e24:	5cd3      	ldrb	r3, [r2, r3]
 8003e26:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003e28:	7efb      	ldrb	r3, [r7, #27]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	481d      	ldr	r0, [pc, #116]	; (8003ea4 <create_name+0x124>)
 8003e2e:	f7ff f80e 	bl	8002e4e <chk_chr>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <create_name+0xbc>
 8003e38:	2306      	movs	r3, #6
 8003e3a:	e02c      	b.n	8003e96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003e3c:	7efb      	ldrb	r3, [r7, #27]
 8003e3e:	2b60      	cmp	r3, #96	; 0x60
 8003e40:	d905      	bls.n	8003e4e <create_name+0xce>
 8003e42:	7efb      	ldrb	r3, [r7, #27]
 8003e44:	2b7a      	cmp	r3, #122	; 0x7a
 8003e46:	d802      	bhi.n	8003e4e <create_name+0xce>
 8003e48:	7efb      	ldrb	r3, [r7, #27]
 8003e4a:	3b20      	subs	r3, #32
 8003e4c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	613a      	str	r2, [r7, #16]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	4413      	add	r3, r2
 8003e58:	7efa      	ldrb	r2, [r7, #27]
 8003e5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003e5c:	e7a6      	b.n	8003dac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003e5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	441a      	add	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <create_name+0xf4>
 8003e70:	2306      	movs	r3, #6
 8003e72:	e010      	b.n	8003e96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2be5      	cmp	r3, #229	; 0xe5
 8003e7a:	d102      	bne.n	8003e82 <create_name+0x102>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2205      	movs	r2, #5
 8003e80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003e82:	7efb      	ldrb	r3, [r7, #27]
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d801      	bhi.n	8003e8c <create_name+0x10c>
 8003e88:	2204      	movs	r2, #4
 8003e8a:	e000      	b.n	8003e8e <create_name+0x10e>
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	330b      	adds	r3, #11
 8003e92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003e94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	08005230 	.word	0x08005230
 8003ea4:	080051dc 	.word	0x080051dc

08003ea8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003ebc:	e002      	b.n	8003ec4 <follow_path+0x1c>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b2f      	cmp	r3, #47	; 0x2f
 8003eca:	d0f8      	beq.n	8003ebe <follow_path+0x16>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b5c      	cmp	r3, #92	; 0x5c
 8003ed2:	d0f4      	beq.n	8003ebe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b1f      	cmp	r3, #31
 8003ee0:	d80a      	bhi.n	8003ef8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003eea:	2100      	movs	r1, #0
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fcf9 	bl	80038e4 <dir_sdi>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	75fb      	strb	r3, [r7, #23]
 8003ef6:	e043      	b.n	8003f80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003ef8:	463b      	mov	r3, r7
 8003efa:	4619      	mov	r1, r3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ff3f 	bl	8003d80 <create_name>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d134      	bne.n	8003f76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff feaf 	bl	8003c70 <dir_find>
 8003f12:	4603      	mov	r3, r0
 8003f14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003f1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d127      	bne.n	8003f7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d122      	bne.n	8003f7a <follow_path+0xd2>
 8003f34:	2305      	movs	r3, #5
 8003f36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003f38:	e01f      	b.n	8003f7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11c      	bne.n	8003f7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	799b      	ldrb	r3, [r3, #6]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003f50:	2305      	movs	r3, #5
 8003f52:	75fb      	strb	r3, [r7, #23]
 8003f54:	e014      	b.n	8003f80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	4413      	add	r3, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fe42 	bl	8003bf2 <ld_clust>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003f74:	e7c0      	b.n	8003ef8 <follow_path+0x50>
			if (res != FR_OK) break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <follow_path+0xd8>
				break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003f7e:	bf00      	nop
			}
		}
	}

	return res;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
 8003f96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d031      	beq.n	8004004 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e002      	b.n	8003fae <get_ldnumber+0x24>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3301      	adds	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d903      	bls.n	8003fbe <get_ldnumber+0x34>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b3a      	cmp	r3, #58	; 0x3a
 8003fbc:	d1f4      	bne.n	8003fa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b3a      	cmp	r3, #58	; 0x3a
 8003fc4:	d11c      	bne.n	8004000 <get_ldnumber+0x76>
			tp = *path;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	60fa      	str	r2, [r7, #12]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	3b30      	subs	r3, #48	; 0x30
 8003fd6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	d80e      	bhi.n	8003ffc <get_ldnumber+0x72>
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d10a      	bne.n	8003ffc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <get_ldnumber+0x72>
					vol = (int)i;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	e002      	b.n	8004006 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004004:	693b      	ldr	r3, [r7, #16]
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	70da      	strb	r2, [r3, #3]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff f8d8 	bl	80031e4 <move_window>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <check_fs+0x2a>
 800403a:	2304      	movs	r3, #4
 800403c:	e038      	b.n	80040b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3330      	adds	r3, #48	; 0x30
 8004042:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fe1c 	bl	8002c84 <ld_word>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <check_fs+0x48>
 8004058:	2303      	movs	r3, #3
 800405a:	e029      	b.n	80040b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004062:	2be9      	cmp	r3, #233	; 0xe9
 8004064:	d009      	beq.n	800407a <check_fs+0x66>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800406c:	2beb      	cmp	r3, #235	; 0xeb
 800406e:	d11e      	bne.n	80040ae <check_fs+0x9a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004076:	2b90      	cmp	r3, #144	; 0x90
 8004078:	d119      	bne.n	80040ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3330      	adds	r3, #48	; 0x30
 800407e:	3336      	adds	r3, #54	; 0x36
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fe17 	bl	8002cb4 <ld_dword>
 8004086:	4603      	mov	r3, r0
 8004088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <check_fs+0xa4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <check_fs+0x82>
 8004092:	2300      	movs	r3, #0
 8004094:	e00c      	b.n	80040b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3330      	adds	r3, #48	; 0x30
 800409a:	3352      	adds	r3, #82	; 0x52
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fe09 	bl	8002cb4 <ld_dword>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4a05      	ldr	r2, [pc, #20]	; (80040bc <check_fs+0xa8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <check_fs+0x9a>
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80040ae:	2302      	movs	r3, #2
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	00544146 	.word	0x00544146
 80040bc:	33544146 	.word	0x33544146

080040c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b096      	sub	sp, #88	; 0x58
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff ff58 	bl	8003f8a <get_ldnumber>
 80040da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80040dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da01      	bge.n	80040e6 <find_volume+0x26>
 80040e2:	230b      	movs	r3, #11
 80040e4:	e22d      	b.n	8004542 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80040e6:	4aa1      	ldr	r2, [pc, #644]	; (800436c <find_volume+0x2ac>)
 80040e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <find_volume+0x3a>
 80040f6:	230c      	movs	r3, #12
 80040f8:	e223      	b.n	8004542 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01a      	beq.n	8004146 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fd17 	bl	8002b48 <disk_status>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10c      	bne.n	8004146 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <find_volume+0x82>
 8004132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800413e:	230a      	movs	r3, #10
 8004140:	e1ff      	b.n	8004542 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004142:	2300      	movs	r3, #0
 8004144:	e1fd      	b.n	8004542 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414e:	b2da      	uxtb	r2, r3
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fd0f 	bl	8002b7c <disk_initialize>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004170:	2303      	movs	r3, #3
 8004172:	e1e6      	b.n	8004542 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <find_volume+0xca>
 800417a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004186:	230a      	movs	r3, #10
 8004188:	e1db      	b.n	8004542 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800418e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004192:	f7ff ff3f 	bl	8004014 <check_fs>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800419c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d149      	bne.n	8004238 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80041a4:	2300      	movs	r3, #0
 80041a6:	643b      	str	r3, [r7, #64]	; 0x40
 80041a8:	e01e      	b.n	80041e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80041b8:	4413      	add	r3, r2
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	3304      	adds	r3, #4
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d006      	beq.n	80041d4 <find_volume+0x114>
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	3308      	adds	r3, #8
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fd72 	bl	8002cb4 <ld_dword>
 80041d0:	4602      	mov	r2, r0
 80041d2:	e000      	b.n	80041d6 <find_volume+0x116>
 80041d4:	2200      	movs	r2, #0
 80041d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	3358      	adds	r3, #88	; 0x58
 80041dc:	443b      	add	r3, r7
 80041de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80041e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e4:	3301      	adds	r3, #1
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
 80041e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d9dd      	bls.n	80041aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80041ee:	2300      	movs	r3, #0
 80041f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <find_volume+0x13e>
 80041f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fa:	3b01      	subs	r3, #1
 80041fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	3358      	adds	r3, #88	; 0x58
 8004204:	443b      	add	r3, r7
 8004206:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800420a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800420c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <find_volume+0x15e>
 8004212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004216:	f7ff fefd 	bl	8004014 <check_fs>
 800421a:	4603      	mov	r3, r0
 800421c:	e000      	b.n	8004220 <find_volume+0x160>
 800421e:	2303      	movs	r3, #3
 8004220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004228:	2b01      	cmp	r3, #1
 800422a:	d905      	bls.n	8004238 <find_volume+0x178>
 800422c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422e:	3301      	adds	r3, #1
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	2b03      	cmp	r3, #3
 8004236:	d9e2      	bls.n	80041fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800423c:	2b04      	cmp	r3, #4
 800423e:	d101      	bne.n	8004244 <find_volume+0x184>
 8004240:	2301      	movs	r3, #1
 8004242:	e17e      	b.n	8004542 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004248:	2b01      	cmp	r3, #1
 800424a:	d901      	bls.n	8004250 <find_volume+0x190>
 800424c:	230d      	movs	r3, #13
 800424e:	e178      	b.n	8004542 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	3330      	adds	r3, #48	; 0x30
 8004254:	330b      	adds	r3, #11
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fd14 	bl	8002c84 <ld_word>
 800425c:	4603      	mov	r3, r0
 800425e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004262:	d001      	beq.n	8004268 <find_volume+0x1a8>
 8004264:	230d      	movs	r3, #13
 8004266:	e16c      	b.n	8004542 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	3330      	adds	r3, #48	; 0x30
 800426c:	3316      	adds	r3, #22
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fd08 	bl	8002c84 <ld_word>
 8004274:	4603      	mov	r3, r0
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <find_volume+0x1cc>
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	3330      	adds	r3, #48	; 0x30
 8004282:	3324      	adds	r3, #36	; 0x24
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fd15 	bl	8002cb4 <ld_dword>
 800428a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004290:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	789b      	ldrb	r3, [r3, #2]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d005      	beq.n	80042b0 <find_volume+0x1f0>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	789b      	ldrb	r3, [r3, #2]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d001      	beq.n	80042b0 <find_volume+0x1f0>
 80042ac:	230d      	movs	r3, #13
 80042ae:	e148      	b.n	8004542 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	789b      	ldrb	r3, [r3, #2]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	895b      	ldrh	r3, [r3, #10]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <find_volume+0x224>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	895b      	ldrh	r3, [r3, #10]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	895b      	ldrh	r3, [r3, #10]
 80042dc:	3b01      	subs	r3, #1
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <find_volume+0x228>
 80042e4:	230d      	movs	r3, #13
 80042e6:	e12c      	b.n	8004542 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	3330      	adds	r3, #48	; 0x30
 80042ec:	3311      	adds	r3, #17
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fcc8 	bl	8002c84 <ld_word>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	891b      	ldrh	r3, [r3, #8]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <find_volume+0x24e>
 800430a:	230d      	movs	r3, #13
 800430c:	e119      	b.n	8004542 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	3330      	adds	r3, #48	; 0x30
 8004312:	3313      	adds	r3, #19
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fcb5 	bl	8002c84 <ld_word>
 800431a:	4603      	mov	r3, r0
 800431c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800431e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <find_volume+0x272>
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	3330      	adds	r3, #48	; 0x30
 8004328:	3320      	adds	r3, #32
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fcc2 	bl	8002cb4 <ld_dword>
 8004330:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	3330      	adds	r3, #48	; 0x30
 8004336:	330e      	adds	r3, #14
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe fca3 	bl	8002c84 <ld_word>
 800433e:	4603      	mov	r3, r0
 8004340:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <find_volume+0x28c>
 8004348:	230d      	movs	r3, #13
 800434a:	e0fa      	b.n	8004542 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800434c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800434e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004350:	4413      	add	r3, r2
 8004352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004354:	8912      	ldrh	r2, [r2, #8]
 8004356:	0912      	lsrs	r2, r2, #4
 8004358:	b292      	uxth	r2, r2
 800435a:	4413      	add	r3, r2
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800435e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	429a      	cmp	r2, r3
 8004364:	d204      	bcs.n	8004370 <find_volume+0x2b0>
 8004366:	230d      	movs	r3, #13
 8004368:	e0eb      	b.n	8004542 <find_volume+0x482>
 800436a:	bf00      	nop
 800436c:	20000578 	.word	0x20000578
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004378:	8952      	ldrh	r2, [r2, #10]
 800437a:	fbb3 f3f2 	udiv	r3, r3, r2
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <find_volume+0x2ca>
 8004386:	230d      	movs	r3, #13
 8004388:	e0db      	b.n	8004542 <find_volume+0x482>
		fmt = FS_FAT32;
 800438a:	2303      	movs	r3, #3
 800438c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004396:	4293      	cmp	r3, r2
 8004398:	d802      	bhi.n	80043a0 <find_volume+0x2e0>
 800439a:	2302      	movs	r3, #2
 800439c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d802      	bhi.n	80043b0 <find_volume+0x2f0>
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043bc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80043be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80043c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c2:	441a      	add	r2, r3
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80043c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	441a      	add	r2, r3
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80043d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d11e      	bne.n	8004418 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	3330      	adds	r3, #48	; 0x30
 80043de:	332a      	adds	r3, #42	; 0x2a
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe fc4f 	bl	8002c84 <ld_word>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <find_volume+0x330>
 80043ec:	230d      	movs	r3, #13
 80043ee:	e0a8      	b.n	8004542 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	891b      	ldrh	r3, [r3, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <find_volume+0x33c>
 80043f8:	230d      	movs	r3, #13
 80043fa:	e0a2      	b.n	8004542 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	3330      	adds	r3, #48	; 0x30
 8004400:	332c      	adds	r3, #44	; 0x2c
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fc56 	bl	8002cb4 <ld_dword>
 8004408:	4602      	mov	r2, r0
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
 8004416:	e01f      	b.n	8004458 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	891b      	ldrh	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <find_volume+0x364>
 8004420:	230d      	movs	r3, #13
 8004422:	e08e      	b.n	8004542 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442a:	441a      	add	r2, r3
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004434:	2b02      	cmp	r3, #2
 8004436:	d103      	bne.n	8004440 <find_volume+0x380>
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	e00a      	b.n	8004456 <find_volume+0x396>
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	4613      	mov	r3, r2
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	4413      	add	r3, r2
 800444a:	085a      	lsrs	r2, r3, #1
 800444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004456:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004462:	0a5b      	lsrs	r3, r3, #9
 8004464:	429a      	cmp	r2, r3
 8004466:	d201      	bcs.n	800446c <find_volume+0x3ac>
 8004468:	230d      	movs	r3, #13
 800446a:	e06a      	b.n	8004542 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	f04f 32ff 	mov.w	r2, #4294967295
 8004472:	611a      	str	r2, [r3, #16]
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004486:	2b03      	cmp	r3, #3
 8004488:	d149      	bne.n	800451e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	3330      	adds	r3, #48	; 0x30
 800448e:	3330      	adds	r3, #48	; 0x30
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fbf7 	bl	8002c84 <ld_word>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d140      	bne.n	800451e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800449c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449e:	3301      	adds	r3, #1
 80044a0:	4619      	mov	r1, r3
 80044a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044a4:	f7fe fe9e 	bl	80031e4 <move_window>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d137      	bne.n	800451e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	2200      	movs	r2, #0
 80044b2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	3330      	adds	r3, #48	; 0x30
 80044b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fbe1 	bl	8002c84 <ld_word>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d127      	bne.n	800451e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	3330      	adds	r3, #48	; 0x30
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fbee 	bl	8002cb4 <ld_dword>
 80044d8:	4603      	mov	r3, r0
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <find_volume+0x48c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d11e      	bne.n	800451e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	3330      	adds	r3, #48	; 0x30
 80044e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fbe3 	bl	8002cb4 <ld_dword>
 80044ee:	4603      	mov	r3, r0
 80044f0:	4a17      	ldr	r2, [pc, #92]	; (8004550 <find_volume+0x490>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d113      	bne.n	800451e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	3330      	adds	r3, #48	; 0x30
 80044fa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fbd8 	bl	8002cb4 <ld_dword>
 8004504:	4602      	mov	r2, r0
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	3330      	adds	r3, #48	; 0x30
 800450e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fbce 	bl	8002cb4 <ld_dword>
 8004518:	4602      	mov	r2, r0
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004524:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <find_volume+0x494>)
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <find_volume+0x494>)
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <find_volume+0x494>)
 8004534:	881a      	ldrh	r2, [r3, #0]
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800453a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800453c:	f7fe fdea 	bl	8003114 <clear_lock>
#endif
	return FR_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3758      	adds	r7, #88	; 0x58
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	41615252 	.word	0x41615252
 8004550:	61417272 	.word	0x61417272
 8004554:	2000057c 	.word	0x2000057c

08004558 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004562:	2309      	movs	r3, #9
 8004564:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <validate+0x4e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d018      	beq.n	80045a6 <validate+0x4e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d013      	beq.n	80045a6 <validate+0x4e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	889a      	ldrh	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	88db      	ldrh	r3, [r3, #6]
 8004588:	429a      	cmp	r2, r3
 800458a:	d10c      	bne.n	80045a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	785b      	ldrb	r3, [r3, #1]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fad8 	bl	8002b48 <disk_status>
 8004598:	4603      	mov	r3, r0
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <validate+0x4e>
			res = FR_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <validate+0x5a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	e000      	b.n	80045b4 <validate+0x5c>
 80045b2:	2300      	movs	r3, #0
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	6013      	str	r3, [r2, #0]
	return res;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80045d6:	f107 0310 	add.w	r3, r7, #16
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fcd5 	bl	8003f8a <get_ldnumber>
 80045e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	da01      	bge.n	80045ec <f_mount+0x28>
 80045e8:	230b      	movs	r3, #11
 80045ea:	e02b      	b.n	8004644 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80045ec:	4a17      	ldr	r2, [pc, #92]	; (800464c <f_mount+0x88>)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80045fc:	69b8      	ldr	r0, [r7, #24]
 80045fe:	f7fe fd89 	bl	8003114 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	490d      	ldr	r1, [pc, #52]	; (800464c <f_mount+0x88>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <f_mount+0x66>
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d001      	beq.n	800462e <f_mount+0x6a>
 800462a:	2300      	movs	r3, #0
 800462c:	e00a      	b.n	8004644 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800462e:	f107 010c 	add.w	r1, r7, #12
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	2200      	movs	r2, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff fd41 	bl	80040c0 <find_volume>
 800463e:	4603      	mov	r3, r0
 8004640:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004642:	7dfb      	ldrb	r3, [r7, #23]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000578 	.word	0x20000578

08004650 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b098      	sub	sp, #96	; 0x60
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <f_open+0x18>
 8004664:	2309      	movs	r3, #9
 8004666:	e1ad      	b.n	80049c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	f107 0110 	add.w	r1, r7, #16
 8004676:	f107 0308 	add.w	r3, r7, #8
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fd20 	bl	80040c0 <find_volume>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 8191 	bne.w	80049b2 <f_open+0x362>
		dj.obj.fs = fs;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	f107 0314 	add.w	r3, r7, #20
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fc03 	bl	8003ea8 <follow_path>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80046a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11a      	bne.n	80046e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80046b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da03      	bge.n	80046c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80046ba:	2306      	movs	r3, #6
 80046bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80046c0:	e011      	b.n	80046e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fbd2 	bl	8002e84 <chk_lock>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	f003 031c 	and.w	r3, r3, #28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d07f      	beq.n	80047f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80046f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d017      	beq.n	8004728 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80046f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d10e      	bne.n	800471e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004700:	f7fe fc1c 	bl	8002f3c <enq_lock>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <f_open+0xc8>
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fb03 	bl	8003d1a <dir_register>
 8004714:	4603      	mov	r3, r0
 8004716:	e000      	b.n	800471a <f_open+0xca>
 8004718:	2312      	movs	r3, #18
 800471a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	f043 0308 	orr.w	r3, r3, #8
 8004724:	71fb      	strb	r3, [r7, #7]
 8004726:	e010      	b.n	800474a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004728:	7ebb      	ldrb	r3, [r7, #26]
 800472a:	f003 0311 	and.w	r3, r3, #17
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <f_open+0xea>
					res = FR_DENIED;
 8004732:	2307      	movs	r3, #7
 8004734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004738:	e007      	b.n	800474a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <f_open+0xfa>
 8004744:	2308      	movs	r3, #8
 8004746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800474a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800474e:	2b00      	cmp	r3, #0
 8004750:	d168      	bne.n	8004824 <f_open+0x1d4>
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d063      	beq.n	8004824 <f_open+0x1d4>
				dw = GET_FATTIME();
 800475c:	f7fe f992 	bl	8002a84 <get_fattime>
 8004760:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	330e      	adds	r3, #14
 8004766:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fae1 	bl	8002d30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004770:	3316      	adds	r3, #22
 8004772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fadb 	bl	8002d30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	330b      	adds	r3, #11
 800477e:	2220      	movs	r2, #32
 8004780:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fa32 	bl	8003bf2 <ld_clust>
 800478e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004794:	2200      	movs	r2, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fa4a 	bl	8003c30 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	331c      	adds	r3, #28
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fac4 	bl	8002d30 <st_dword>
					fs->wflag = 1;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2201      	movs	r2, #1
 80047ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d037      	beq.n	8004824 <f_open+0x1d4>
						dw = fs->winsect;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80047ba:	f107 0314 	add.w	r3, r7, #20
 80047be:	2200      	movs	r2, #0
 80047c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe ff5d 	bl	8003682 <remove_chain>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80047ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d126      	bne.n	8004824 <f_open+0x1d4>
							res = move_window(fs, dw);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fd02 	bl	80031e4 <move_window>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ea:	3a01      	subs	r2, #1
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	e019      	b.n	8004824 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80047f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d115      	bne.n	8004824 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80047f8:	7ebb      	ldrb	r3, [r7, #26]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <f_open+0x1ba>
					res = FR_NO_FILE;
 8004802:	2304      	movs	r3, #4
 8004804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004808:	e00c      	b.n	8004824 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <f_open+0x1d4>
 8004814:	7ebb      	ldrb	r3, [r7, #26]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <f_open+0x1d4>
						res = FR_DENIED;
 800481e:	2307      	movs	r3, #7
 8004820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004828:	2b00      	cmp	r3, #0
 800482a:	d128      	bne.n	800487e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	f107 0314 	add.w	r3, r7, #20
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe fb8b 	bl	8002f80 <inc_lock>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <f_open+0x22e>
 8004878:	2302      	movs	r3, #2
 800487a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800487e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004882:	2b00      	cmp	r3, #0
 8004884:	f040 8095 	bne.w	80049b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff f9af 	bl	8003bf2 <ld_clust>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	331c      	adds	r3, #28
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fa08 	bl	8002cb4 <ld_dword>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	88da      	ldrh	r2, [r3, #6]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	79fa      	ldrb	r2, [r7, #7]
 80048c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3330      	adds	r3, #48	; 0x30
 80048da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fa72 	bl	8002dca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d060      	beq.n	80049b2 <f_open+0x362>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d05c      	beq.n	80049b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	895b      	ldrh	r3, [r3, #10]
 8004904:	025b      	lsls	r3, r3, #9
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	657b      	str	r3, [r7, #84]	; 0x54
 8004914:	e016      	b.n	8004944 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fd1d 	bl	800335a <get_fat>
 8004920:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004924:	2b01      	cmp	r3, #1
 8004926:	d802      	bhi.n	800492e <f_open+0x2de>
 8004928:	2302      	movs	r3, #2
 800492a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800492e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d102      	bne.n	800493c <f_open+0x2ec>
 8004936:	2301      	movs	r3, #1
 8004938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800493c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
 8004944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <f_open+0x304>
 800494c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800494e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004950:	429a      	cmp	r2, r3
 8004952:	d8e0      	bhi.n	8004916 <f_open+0x2c6>
				}
				fp->clust = clst;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004958:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800495a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800495e:	2b00      	cmp	r3, #0
 8004960:	d127      	bne.n	80049b2 <f_open+0x362>
 8004962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004968:	2b00      	cmp	r3, #0
 800496a:	d022      	beq.n	80049b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe fcd3 	bl	800331c <clust2sect>
 8004976:	6478      	str	r0, [r7, #68]	; 0x44
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <f_open+0x336>
						res = FR_INT_ERR;
 800497e:	2302      	movs	r3, #2
 8004980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004984:	e015      	b.n	80049b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004988:	0a5a      	lsrs	r2, r3, #9
 800498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	7858      	ldrb	r0, [r3, #1]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	2301      	movs	r3, #1
 80049a2:	f7fe f911 	bl	8002bc8 <disk_read>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <f_open+0x362>
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80049b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <f_open+0x370>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80049c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3760      	adds	r7, #96	; 0x60
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	; 0x38
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f107 0214 	add.w	r2, r7, #20
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fdb3 	bl	8004558 <validate>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80049f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <f_read+0x44>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	7d5b      	ldrb	r3, [r3, #21]
 8004a04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <f_read+0x4a>
 8004a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a14:	e115      	b.n	8004c42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	7d1b      	ldrb	r3, [r3, #20]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <f_read+0x5a>
 8004a22:	2307      	movs	r3, #7
 8004a24:	e10d      	b.n	8004c42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f240 80fe 	bls.w	8004c38 <f_read+0x26c>
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004a40:	e0fa      	b.n	8004c38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 80c6 	bne.w	8004bdc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	0a5b      	lsrs	r3, r3, #9
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	8952      	ldrh	r2, [r2, #10]
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d12f      	bne.n	8004ac6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
 8004a74:	e013      	b.n	8004a9e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	4619      	mov	r1, r3
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7fe fef9 	bl	800387c <clmt_clust>
 8004a8a:	6338      	str	r0, [r7, #48]	; 0x30
 8004a8c:	e007      	b.n	8004a9e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fe fc5f 	bl	800335a <get_fat>
 8004a9c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d804      	bhi.n	8004aae <f_read+0xe2>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	755a      	strb	r2, [r3, #21]
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0c9      	b.n	8004c42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d104      	bne.n	8004ac0 <f_read+0xf4>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	755a      	strb	r2, [r3, #21]
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0c0      	b.n	8004c42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fe fc24 	bl	800331c <clust2sect>
 8004ad4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <f_read+0x11a>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	755a      	strb	r2, [r3, #21]
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e0ad      	b.n	8004c42 <f_read+0x276>
			sect += csect;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0a5b      	lsrs	r3, r3, #9
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d039      	beq.n	8004b6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	4413      	add	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	8952      	ldrh	r2, [r2, #10]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d905      	bls.n	8004b14 <f_read+0x148>
					cc = fs->csize - csect;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	895b      	ldrh	r3, [r3, #10]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	7858      	ldrb	r0, [r3, #1]
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b1e:	f7fe f853 	bl	8002bc8 <disk_read>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <f_read+0x166>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	755a      	strb	r2, [r3, #21]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e087      	b.n	8004c42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	7d1b      	ldrb	r3, [r3, #20]
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da14      	bge.n	8004b66 <f_read+0x19a>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1a      	ldr	r2, [r3, #32]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d90d      	bls.n	8004b66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	025b      	lsls	r3, r3, #9
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	18d0      	adds	r0, r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3330      	adds	r3, #48	; 0x30
 8004b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b60:	4619      	mov	r1, r3
 8004b62:	f7fe f911 	bl	8002d88 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	025b      	lsls	r3, r3, #9
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004b6c:	e050      	b.n	8004c10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d02e      	beq.n	8004bd6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	7d1b      	ldrb	r3, [r3, #20]
 8004b7c:	b25b      	sxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da18      	bge.n	8004bb4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	7858      	ldrb	r0, [r3, #1]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a1a      	ldr	r2, [r3, #32]
 8004b90:	2301      	movs	r3, #1
 8004b92:	f7fe f839 	bl	8002c08 <disk_write>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <f_read+0x1da>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	755a      	strb	r2, [r3, #21]
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e04d      	b.n	8004c42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	7d1b      	ldrb	r3, [r3, #20]
 8004baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	7858      	ldrb	r0, [r3, #1]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	f7fe f801 	bl	8002bc8 <disk_read>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <f_read+0x20a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	755a      	strb	r2, [r3, #21]
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e035      	b.n	8004c42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d901      	bls.n	8004bf6 <f_read+0x22a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c04:	4413      	add	r3, r2
 8004c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c0c:	f7fe f8bc 	bl	8002d88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	4413      	add	r3, r2
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	441a      	add	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	619a      	str	r2, [r3, #24]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	441a      	add	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f47f af01 	bne.w	8004a42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3738      	adds	r7, #56	; 0x38
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b08c      	sub	sp, #48	; 0x30
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f107 0210 	add.w	r2, r7, #16
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fc74 	bl	8004558 <validate>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <f_write+0x44>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	7d5b      	ldrb	r3, [r3, #21]
 8004c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <f_write+0x4a>
 8004c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c92:	e14b      	b.n	8004f2c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	7d1b      	ldrb	r3, [r3, #20]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <f_write+0x5a>
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	e143      	b.n	8004f2c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	441a      	add	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	f080 812d 	bcs.w	8004f10 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004cbe:	e127      	b.n	8004f10 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 80e3 	bne.w	8004e94 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	0a5b      	lsrs	r3, r3, #9
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	8952      	ldrh	r2, [r2, #10]
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d143      	bne.n	8004d6c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10c      	bne.n	8004d06 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11a      	bne.n	8004d2e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fd25 	bl	800374c <create_chain>
 8004d02:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d04:	e013      	b.n	8004d2e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	4619      	mov	r1, r3
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7fe fdb1 	bl	800387c <clmt_clust>
 8004d1a:	62b8      	str	r0, [r7, #40]	; 0x28
 8004d1c:	e007      	b.n	8004d2e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fd10 	bl	800374c <create_chain>
 8004d2c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80f2 	beq.w	8004f1a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d104      	bne.n	8004d46 <f_write+0xfc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	755a      	strb	r2, [r3, #21]
 8004d42:	2302      	movs	r3, #2
 8004d44:	e0f2      	b.n	8004f2c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d104      	bne.n	8004d58 <f_write+0x10e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	755a      	strb	r2, [r3, #21]
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0e9      	b.n	8004f2c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <f_write+0x122>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	7d1b      	ldrb	r3, [r3, #20]
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da18      	bge.n	8004da8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	7858      	ldrb	r0, [r3, #1]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	2301      	movs	r3, #1
 8004d86:	f7fd ff3f 	bl	8002c08 <disk_write>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <f_write+0x150>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	755a      	strb	r2, [r3, #21]
 8004d96:	2301      	movs	r3, #1
 8004d98:	e0c8      	b.n	8004f2c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	7d1b      	ldrb	r3, [r3, #20]
 8004d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7fe fab3 	bl	800331c <clust2sect>
 8004db6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <f_write+0x17e>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	755a      	strb	r2, [r3, #21]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e0b1      	b.n	8004f2c <f_write+0x2e2>
			sect += csect;
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d03c      	beq.n	8004e56 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	4413      	add	r3, r2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	8952      	ldrh	r2, [r2, #10]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d905      	bls.n	8004df6 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	895b      	ldrh	r3, [r3, #10]
 8004dee:	461a      	mov	r2, r3
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	7858      	ldrb	r0, [r3, #1]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	69f9      	ldr	r1, [r7, #28]
 8004e00:	f7fd ff02 	bl	8002c08 <disk_write>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d004      	beq.n	8004e14 <f_write+0x1ca>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	755a      	strb	r2, [r3, #21]
 8004e10:	2301      	movs	r3, #1
 8004e12:	e08b      	b.n	8004f2c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	6a3a      	ldr	r2, [r7, #32]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d915      	bls.n	8004e4e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	025b      	lsls	r3, r3, #9
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f7fd ffa4 	bl	8002d88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	7d1b      	ldrb	r3, [r3, #20]
 8004e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	025b      	lsls	r3, r3, #9
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004e54:	e03f      	b.n	8004ed6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d016      	beq.n	8004e8e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d210      	bcs.n	8004e8e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	7858      	ldrb	r0, [r3, #1]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e76:	2301      	movs	r3, #1
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	f7fd fea5 	bl	8002bc8 <disk_read>
 8004e7e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	755a      	strb	r2, [r3, #21]
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e04e      	b.n	8004f2c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d901      	bls.n	8004eae <f_write+0x264>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebc:	4413      	add	r3, r2
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd ff60 	bl	8002d88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	7d1b      	ldrb	r3, [r3, #20]
 8004ecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	4413      	add	r3, r2
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	441a      	add	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	619a      	str	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf38      	it	cc
 8004ef6:	461a      	movcc	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	441a      	add	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f47f aed4 	bne.w	8004cc0 <f_write+0x76>
 8004f18:	e000      	b.n	8004f1c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004f1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	7d1b      	ldrb	r3, [r3, #20]
 8004f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3730      	adds	r7, #48	; 0x30
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f107 0208 	add.w	r2, r7, #8
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fb07 	bl	8004558 <validate>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d168      	bne.n	8005026 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7d1b      	ldrb	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d062      	beq.n	8005026 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	7d1b      	ldrb	r3, [r3, #20]
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da15      	bge.n	8004f96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	7858      	ldrb	r0, [r3, #1]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1a      	ldr	r2, [r3, #32]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f7fd fe45 	bl	8002c08 <disk_write>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <f_sync+0x54>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e04f      	b.n	8005028 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	7d1b      	ldrb	r3, [r3, #20]
 8004f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004f96:	f7fd fd75 	bl	8002a84 <get_fattime>
 8004f9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7fe f91d 	bl	80031e4 <move_window>
 8004faa:	4603      	mov	r3, r0
 8004fac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d138      	bne.n	8005026 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	330b      	adds	r3, #11
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	330b      	adds	r3, #11
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	f7fe fe2a 	bl	8003c30 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f103 021c 	add.w	r2, r3, #28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fd fea1 	bl	8002d30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3316      	adds	r3, #22
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fd fe9b 	bl	8002d30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3312      	adds	r3, #18
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f7fd fe7a 	bl	8002cfa <st_word>
					fs->wflag = 1;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2201      	movs	r2, #1
 800500a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe f916 	bl	8003240 <sync_fs>
 8005014:	4603      	mov	r3, r0
 8005016:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	7d1b      	ldrb	r3, [r3, #20]
 800501c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005020:	b2da      	uxtb	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005026:	7dfb      	ldrb	r3, [r7, #23]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ff7b 	bl	8004f34 <f_sync>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d118      	bne.n	800507a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f107 0208 	add.w	r2, r7, #8
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fa81 	bl	8004558 <validate>
 8005056:	4603      	mov	r3, r0
 8005058:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10c      	bne.n	800507a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe f819 	bl	800309c <dec_lock>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 800509c:	7a5b      	ldrb	r3, [r3, #9]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d131      	bne.n	8005108 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80050a4:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050a6:	7a5b      	ldrb	r3, [r3, #9]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80050b2:	4b19      	ldr	r3, [pc, #100]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050b4:	7a5b      	ldrb	r3, [r3, #9]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	4a17      	ldr	r2, [pc, #92]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050c4:	7a5b      	ldrb	r3, [r3, #9]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050cc:	4413      	add	r3, r2
 80050ce:	79fa      	ldrb	r2, [r7, #7]
 80050d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050d4:	7a5b      	ldrb	r3, [r3, #9]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	b2d1      	uxtb	r1, r2
 80050dc:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <FATFS_LinkDriverEx+0x94>)
 80050de:	7251      	strb	r1, [r2, #9]
 80050e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80050e2:	7dbb      	ldrb	r3, [r7, #22]
 80050e4:	3330      	adds	r3, #48	; 0x30
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	3301      	adds	r3, #1
 80050f0:	223a      	movs	r2, #58	; 0x3a
 80050f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	3302      	adds	r3, #2
 80050f8:	222f      	movs	r2, #47	; 0x2f
 80050fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	3303      	adds	r3, #3
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
}
 800510a:	4618      	mov	r0, r3
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	200005a0 	.word	0x200005a0

0800511c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005126:	2200      	movs	r2, #0
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffaa 	bl	8005084 <FATFS_LinkDriverEx>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <__libc_init_array>:
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4d0d      	ldr	r5, [pc, #52]	; (8005174 <__libc_init_array+0x38>)
 8005140:	4c0d      	ldr	r4, [pc, #52]	; (8005178 <__libc_init_array+0x3c>)
 8005142:	1b64      	subs	r4, r4, r5
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	2600      	movs	r6, #0
 8005148:	42a6      	cmp	r6, r4
 800514a:	d109      	bne.n	8005160 <__libc_init_array+0x24>
 800514c:	4d0b      	ldr	r5, [pc, #44]	; (800517c <__libc_init_array+0x40>)
 800514e:	4c0c      	ldr	r4, [pc, #48]	; (8005180 <__libc_init_array+0x44>)
 8005150:	f000 f820 	bl	8005194 <_init>
 8005154:	1b64      	subs	r4, r4, r5
 8005156:	10a4      	asrs	r4, r4, #2
 8005158:	2600      	movs	r6, #0
 800515a:	42a6      	cmp	r6, r4
 800515c:	d105      	bne.n	800516a <__libc_init_array+0x2e>
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f855 3b04 	ldr.w	r3, [r5], #4
 8005164:	4798      	blx	r3
 8005166:	3601      	adds	r6, #1
 8005168:	e7ee      	b.n	8005148 <__libc_init_array+0xc>
 800516a:	f855 3b04 	ldr.w	r3, [r5], #4
 800516e:	4798      	blx	r3
 8005170:	3601      	adds	r6, #1
 8005172:	e7f2      	b.n	800515a <__libc_init_array+0x1e>
 8005174:	080052b8 	.word	0x080052b8
 8005178:	080052b8 	.word	0x080052b8
 800517c:	080052b8 	.word	0x080052b8
 8005180:	080052bc 	.word	0x080052bc

08005184 <memset>:
 8005184:	4402      	add	r2, r0
 8005186:	4603      	mov	r3, r0
 8005188:	4293      	cmp	r3, r2
 800518a:	d100      	bne.n	800518e <memset+0xa>
 800518c:	4770      	bx	lr
 800518e:	f803 1b01 	strb.w	r1, [r3], #1
 8005192:	e7f9      	b.n	8005188 <memset+0x4>

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr
